[{"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/420832382", "html_url": "https://github.com/rust-lang/cargo/pull/6019#issuecomment-420832382", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/6019", "id": 420832382, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDgzMjM4Mg==", "user": {"login": "rust-highfive", "id": 7378925, "node_id": "MDQ6VXNlcjczNzg5MjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/7378925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-highfive", "html_url": "https://github.com/rust-highfive", "followers_url": "https://api.github.com/users/rust-highfive/followers", "following_url": "https://api.github.com/users/rust-highfive/following{/other_user}", "gists_url": "https://api.github.com/users/rust-highfive/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-highfive/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-highfive/subscriptions", "organizations_url": "https://api.github.com/users/rust-highfive/orgs", "repos_url": "https://api.github.com/users/rust-highfive/repos", "events_url": "https://api.github.com/users/rust-highfive/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-highfive/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-12T23:32:28Z", "updated_at": "2018-09-12T23:32:28Z", "author_association": "NONE", "body": "Thanks for the pull request, and welcome! The Rust team is excited to review your changes, and you should hear from @matklad (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nPlease see [the contribution instructions](https://github.com/rust-lang/cargo/blob/master/CONTRIBUTING.md) for more information.\n"}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/421172356", "html_url": "https://github.com/rust-lang/cargo/pull/6019#issuecomment-421172356", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/6019", "id": 421172356, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTE3MjM1Ng==", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars1.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-13T22:26:11Z", "updated_at": "2018-09-13T22:26:11Z", "author_association": "MEMBER", "body": "Thanks for the PR! The implementation here looks reasonable to me (cc @Eh2406 on it as well). I'd be curious to see if others from @rust-lang/cargo have thoughts on this as well!"}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/421193807", "html_url": "https://github.com/rust-lang/cargo/pull/6019#issuecomment-421193807", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/6019", "id": 421193807, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTE5MzgwNw==", "user": {"login": "Eh2406", "id": 3709504, "node_id": "MDQ6VXNlcjM3MDk1MDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3709504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eh2406", "html_url": "https://github.com/Eh2406", "followers_url": "https://api.github.com/users/Eh2406/followers", "following_url": "https://api.github.com/users/Eh2406/following{/other_user}", "gists_url": "https://api.github.com/users/Eh2406/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eh2406/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eh2406/subscriptions", "organizations_url": "https://api.github.com/users/Eh2406/orgs", "repos_url": "https://api.github.com/users/Eh2406/repos", "events_url": "https://api.github.com/users/Eh2406/events{/privacy}", "received_events_url": "https://api.github.com/users/Eh2406/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-14T00:33:26Z", "updated_at": "2018-09-14T00:33:26Z", "author_association": "CONTRIBUTOR", "body": "As my opinion was requested...\r\n\r\nThis does look like the correct implementation. Though I am wondering if one of these days we should add in line test of `compatible` in addition to the unit tests of `registry`. There are a lot of ifs in a specific order.\r\n\r\nAlso `compatible` is the hottest part of the innermost loop of the resolver, so we should check that this did not make the compiler do something silly like not inlining it. I don't think it will be measurable change to performance, but worth a check."}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/423283065", "html_url": "https://github.com/rust-lang/cargo/pull/6019#issuecomment-423283065", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/6019", "id": 423283065, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzI4MzA2NQ==", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars1.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-20T18:18:01Z", "updated_at": "2018-09-20T18:18:01Z", "author_association": "MEMBER", "body": "Ok we got a chance to chat about this in the @rust-lang/cargo team meeting yesterday, and actually after some discussion it looks like this may not be our ideal end state. \r\n\r\nPrerelease versions have always been somewhat buggy in Cargo in that they weren't thoroughly tested and designed well from the get go (more bolted on after the fact). To that end we tried to reevaluate what we would like the behavior of prerelease versions to be, and concluded that there are two main properties that we desire:\r\n\r\n* If a prerelease version is just published, it should not automatically be picked up by existing crates. Instead, prerelease versions should only be considered if explicitly included.\r\n* If a new version such as `1.3.0-beta` is published, then **it should unify with previous semver-compatible versions**. For example if a new beta release for a semver-compatible release is published and requested, then all crates should be unified to use the beta release.\r\n\r\nTo that end this PR is implementing a solution that we ended up identifying as an antipattern, allowing *duplicate* prerelease versions instead of unifying them. This means, for example, that if `1.2.0` of a crate is published and is in use while a different crate requires `1.3.0-beta`, this PR would cause both versions to be linked into the crate graph. If the `1.2.0` version is a public dependency, however, this would likely cause compilation errors now that there are two versions in the crate graph.\r\n\r\nAll in all we ended up deciding that we do not want to merge this PR as-is at this time. Instead we concluded that the prerelease version story is underbaked enough that we'd prefer to see an RFC specifying changes rather than only a PR. @Diggsey would you be willing to write up such an RFC? Do the above thoughts make sense?"}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/423350417", "html_url": "https://github.com/rust-lang/cargo/pull/6019#issuecomment-423350417", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/6019", "id": 423350417, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzM1MDQxNw==", "user": {"login": "Diggsey", "id": 451321, "node_id": "MDQ6VXNlcjQ1MTMyMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/451321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Diggsey", "html_url": "https://github.com/Diggsey", "followers_url": "https://api.github.com/users/Diggsey/followers", "following_url": "https://api.github.com/users/Diggsey/following{/other_user}", "gists_url": "https://api.github.com/users/Diggsey/gists{/gist_id}", "starred_url": "https://api.github.com/users/Diggsey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Diggsey/subscriptions", "organizations_url": "https://api.github.com/users/Diggsey/orgs", "repos_url": "https://api.github.com/users/Diggsey/repos", "events_url": "https://api.github.com/users/Diggsey/events{/privacy}", "received_events_url": "https://api.github.com/users/Diggsey/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-20T22:10:00Z", "updated_at": "2018-09-20T22:10:00Z", "author_association": "NONE", "body": "@alexcrichton did you discuss the issue which motivated this PR? (#6016)\r\n\r\nSpecifically, the combination of [crates.io](http://crates.io) being immutable and forever, and the choice to deviate from semver in this case, means there is no way to \"go back\" to pre-1.0 stability guarantees once a 1.0 version has been published, even if that publication was a mistake. IMO, when releasing a new major version, it should be possible to have a period of relaxed stability guarantees (ie. a pre-release period) without breaking all crates downstream when the actual release happens.\r\n\r\nRegarding your two points:\r\n\r\n- *If a prerelease version is just published, it should not automatically be picked up by existing crates. Instead, prerelease versions should only be considered if explicitly included.*\r\n\r\nI definitely agree with this.\r\n\r\n- *If a new version such as 1.3.0-beta is published, then it should unify with previous semver-compatible versions. For example if a new beta release for a semver-compatible release is published and requested, then all crates should be unified to use the beta release.*\r\n\r\nUnder semver, pre-release versions are not guaranteed to be compatible with any other versions, so silently using `1.3.0` instead of `1.3.0-beta` will break builds which would have otherwise succeeded (at the cost of duplicate versions).\r\n\r\nNote that if consumers of the pre-release *want* to upgrade automatically, they can always use `>=1.3.0-beta, <2.0`.\r\n\r\nIn summary: the `^version` bound on versions is intended to match crate versions which are guaranteed (under semver) to be compatible with the specified version. This means that cargo must be deviating from semver in one of these two ways:\r\n\r\n1) The `^` operator no longer represents semver compatibility, but is instead shorthand for `>=x, <y`\r\n2) Pre-release versions are now required to be forwards compatible with the actual release (in which case, what's the point of them, why not just release the actual major version?)\r\n\r\nIn order for cargo to have a consistent behaviour, one of these two options should be chosen by the @rust-lang/cargo team, or else the decision should be changed.\r\n"}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/423357181", "html_url": "https://github.com/rust-lang/cargo/pull/6019#issuecomment-423357181", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/6019", "id": 423357181, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzM1NzE4MQ==", "user": {"login": "withoutboats", "id": 9063376, "node_id": "MDQ6VXNlcjkwNjMzNzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/9063376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/withoutboats", "html_url": "https://github.com/withoutboats", "followers_url": "https://api.github.com/users/withoutboats/followers", "following_url": "https://api.github.com/users/withoutboats/following{/other_user}", "gists_url": "https://api.github.com/users/withoutboats/gists{/gist_id}", "starred_url": "https://api.github.com/users/withoutboats/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/withoutboats/subscriptions", "organizations_url": "https://api.github.com/users/withoutboats/orgs", "repos_url": "https://api.github.com/users/withoutboats/repos", "events_url": "https://api.github.com/users/withoutboats/events{/privacy}", "received_events_url": "https://api.github.com/users/withoutboats/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-20T22:39:48Z", "updated_at": "2018-09-20T22:39:48Z", "author_association": "CONTRIBUTOR", "body": "I think that's not what Alex meant. He meant that `1.3.0-beta` should be compatible with `1.2.0`, not with `1.3.0`. That is, our intuition is that prereleases represent \"forking paths:\" a prerelease version is compatible with all prior versions the non-prerelease version would be compatible with, but not with that version or any subsequent version."}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/423359196", "html_url": "https://github.com/rust-lang/cargo/pull/6019#issuecomment-423359196", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/6019", "id": 423359196, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzM1OTE5Ng==", "user": {"login": "Diggsey", "id": 451321, "node_id": "MDQ6VXNlcjQ1MTMyMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/451321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Diggsey", "html_url": "https://github.com/Diggsey", "followers_url": "https://api.github.com/users/Diggsey/followers", "following_url": "https://api.github.com/users/Diggsey/following{/other_user}", "gists_url": "https://api.github.com/users/Diggsey/gists{/gist_id}", "starred_url": "https://api.github.com/users/Diggsey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Diggsey/subscriptions", "organizations_url": "https://api.github.com/users/Diggsey/orgs", "repos_url": "https://api.github.com/users/Diggsey/repos", "events_url": "https://api.github.com/users/Diggsey/events{/privacy}", "received_events_url": "https://api.github.com/users/Diggsey/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-20T22:50:00Z", "updated_at": "2018-09-20T22:50:00Z", "author_association": "NONE", "body": "@withoutboats ah that makes more sense. In that case, how will multiple pre-release versions be handled?\r\n\r\nFor example, it makes sense to me that `1.3.0-alpha` would be compatible with `1.2.0`, but it doesn't follow that `1.3.0-beta` is compatible with `1.3.0-alpha` (even though it would still have to be compatible with `1.2.0`).\r\n\r\nThe goal from my point of view is to be able to publish N new major pre-release versions (ie. for a `1.x` crate to be able to publish `2.0.0-alpha`, `2.0.0-beta`, etc. where there are no compatibility guarantees between those pre-release versions (or a potential future `2.0.0` release)\r\n\r\n"}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/423361259", "html_url": "https://github.com/rust-lang/cargo/pull/6019#issuecomment-423361259", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/6019", "id": 423361259, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzM2MTI1OQ==", "user": {"login": "withoutboats", "id": 9063376, "node_id": "MDQ6VXNlcjkwNjMzNzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/9063376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/withoutboats", "html_url": "https://github.com/withoutboats", "followers_url": "https://api.github.com/users/withoutboats/followers", "following_url": "https://api.github.com/users/withoutboats/following{/other_user}", "gists_url": "https://api.github.com/users/withoutboats/gists{/gist_id}", "starred_url": "https://api.github.com/users/withoutboats/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/withoutboats/subscriptions", "organizations_url": "https://api.github.com/users/withoutboats/orgs", "repos_url": "https://api.github.com/users/withoutboats/repos", "events_url": "https://api.github.com/users/withoutboats/events{/privacy}", "received_events_url": "https://api.github.com/users/withoutboats/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-20T23:00:28Z", "updated_at": "2018-09-20T23:00:28Z", "author_association": "CONTRIBUTOR", "body": "I think each prerelease should be treated as an independent fork and they aren't compatible with one another, just with previous compatible versions."}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/423635436", "html_url": "https://github.com/rust-lang/cargo/pull/6019#issuecomment-423635436", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/6019", "id": 423635436, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzYzNTQzNg==", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars1.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-21T18:45:40Z", "updated_at": "2018-09-21T18:45:40Z", "author_association": "MEMBER", "body": "Ah yes @withoutboats's clarifications are right, but I think though I'd prefer if you can still only have one prerelease version in a crate graph (that's compatible)\r\n\r\nFor example if you have one crate which requests `1.2.0-alpha`, then *everything* prior to 1.2.0 should use `1.2.0-alpha`. Once `1.2.0` is published then a dependency requirement of `1.2.0-alpha` won't match that, but `1.2.0-alpha` will continue to conflict with `1.2.0`. \r\n\r\nIf one crate request `1.2.0-alpha` and one requests `1.2.0-beta`, I think that should be an error. Put another way I think our \"semver compatible\" logic as we have it today is correct and what we want to keep, but we need to tweak a bit when prerelease versions are available for version resolution and when they're selected."}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/423675480", "html_url": "https://github.com/rust-lang/cargo/pull/6019#issuecomment-423675480", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/6019", "id": 423675480, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzY3NTQ4MA==", "user": {"login": "Diggsey", "id": 451321, "node_id": "MDQ6VXNlcjQ1MTMyMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/451321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Diggsey", "html_url": "https://github.com/Diggsey", "followers_url": "https://api.github.com/users/Diggsey/followers", "following_url": "https://api.github.com/users/Diggsey/following{/other_user}", "gists_url": "https://api.github.com/users/Diggsey/gists{/gist_id}", "starred_url": "https://api.github.com/users/Diggsey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Diggsey/subscriptions", "organizations_url": "https://api.github.com/users/Diggsey/orgs", "repos_url": "https://api.github.com/users/Diggsey/repos", "events_url": "https://api.github.com/users/Diggsey/events{/privacy}", "received_events_url": "https://api.github.com/users/Diggsey/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-21T21:27:21Z", "updated_at": "2018-09-21T21:27:21Z", "author_association": "NONE", "body": "> I think though I'd prefer if you can still only have one prerelease version in a crate graph (that's compatible)\r\n\r\nHm, I'd much prefer it if we kept the notion we have today where crates are *either* compatible, *or* you can link multiple versions of them. What's the benefit of adding a relationship where crates are *neither* compatible *nor* can be linked together?\r\n\r\nIf you go back to the motivating example of `mime_guess` again, if pre-release versions cannot be linked together, then the crate author is still stuck in this impossible situation where there's no way for them to rectify their mistake of accidentally publishing a 1.0 crate.\r\n\r\nI think this will cause other issues too: let's say we have two crates (A, B) each of which has a (private) dependency on different pre-release versions of a crate C. Now A and B can never be linked together, even though crate C is purely an implementation detail of the two crates.\r\n\r\nToday this can never happen: regardless of what version (pre-release or otherwise) of C, A and B depend on, either the two versions of crate C are *compatible* (in which case the newer version will be chosen) or else they are incompatible (in which case crate C will be linked twice).\r\n\r\nThese are the three things I think are important in order:\r\n1) Backwards compatibility (things that did work must continue to work)\r\n2) Flexibility (as many configurations as possible should work)\r\n3) Clarity (it should be obvious why things don't work)\r\n\r\nDisallowing multiple pre-release versions helps with 3) because you less frequently have errors about incompatible types coming from two versions of the same crate, but it comes at the cost of 2) which I think is more important (because dependency management is just a means to an end: getting your program to compile).\r\n\r\nI think there are other things that could be done to help with 3) without preventing multiple pre-release versions to be combined:\r\n- Better error messages when types from different versions of the same crate are mixed\r\n- Distinguish public from private dependencies at the cargo level\r\n    - Disallow publishing non-pre-release versions of crates with public dependencies on pre-release crates\r\n- Warn or error when multiple versions of a dependency are publicly exported\r\n"}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/423714357", "html_url": "https://github.com/rust-lang/cargo/pull/6019#issuecomment-423714357", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/6019", "id": 423714357, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzcxNDM1Nw==", "user": {"login": "Eh2406", "id": 3709504, "node_id": "MDQ6VXNlcjM3MDk1MDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3709504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eh2406", "html_url": "https://github.com/Eh2406", "followers_url": "https://api.github.com/users/Eh2406/followers", "following_url": "https://api.github.com/users/Eh2406/following{/other_user}", "gists_url": "https://api.github.com/users/Eh2406/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eh2406/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eh2406/subscriptions", "organizations_url": "https://api.github.com/users/Eh2406/orgs", "repos_url": "https://api.github.com/users/Eh2406/repos", "events_url": "https://api.github.com/users/Eh2406/events{/privacy}", "received_events_url": "https://api.github.com/users/Eh2406/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-22T03:55:15Z", "updated_at": "2018-09-22T03:55:15Z", "author_association": "CONTRIBUTOR", "body": "I don't have an opinion on how pre-release version should work, but I have some nits with your arguments.\r\n\r\n> there's no way for them to rectify their mistake of accidentally publishing a 1.0 crate.\r\n\r\nThe next semver version is `2.0`, and there is an infinite supply after that. The situation is that if feels like a small deal to release a new `0.x` version, but feels like a big deal to release a `x.0` version. Another way to deal is to release a new crate until things stabilize, then make a long term stable `2.0`. There aren't perfect solutions but there are ways to deal with the mistake.\r\n\r\n> Today this can never happen: regardless of what version (pre-release or otherwise) of C, A and B depend on, either the two versions of crate C are compatible (in which case the newer version will be chosen) or else they are incompatible (in which case crate C will be linked twice).\r\n\r\nTo be pedantic, that is only true if normal semver type dependency requirements are used. If A requires `\"C\" = \"=1.1.0\"` (or `\"~1.1.0\"`) and B `\"C\" = \"=1.2.0\"` (or `\"~1.2.0\"`) then they can not be built together. My impression is that the only way to get a pre-release version is to use an exact version requirement, so it seems consistent for it to be impossible to combine two different `=` requirements.\r\n\r\n> Distinguish public from private dependencies at the cargo level\r\n\r\nThere is an accepted rfc for that https://github.com/rust-lang/rust/issues/44663, but it has not yet been implemented."}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/423742310", "html_url": "https://github.com/rust-lang/cargo/pull/6019#issuecomment-423742310", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/6019", "id": 423742310, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzc0MjMxMA==", "user": {"login": "Diggsey", "id": 451321, "node_id": "MDQ6VXNlcjQ1MTMyMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/451321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Diggsey", "html_url": "https://github.com/Diggsey", "followers_url": "https://api.github.com/users/Diggsey/followers", "following_url": "https://api.github.com/users/Diggsey/following{/other_user}", "gists_url": "https://api.github.com/users/Diggsey/gists{/gist_id}", "starred_url": "https://api.github.com/users/Diggsey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Diggsey/subscriptions", "organizations_url": "https://api.github.com/users/Diggsey/orgs", "repos_url": "https://api.github.com/users/Diggsey/repos", "events_url": "https://api.github.com/users/Diggsey/events{/privacy}", "received_events_url": "https://api.github.com/users/Diggsey/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-22T12:56:08Z", "updated_at": "2018-09-22T12:56:08Z", "author_association": "NONE", "body": "> The next semver version is 2.0, and there is an infinite supply after that. The situation is that if feels like a small deal to release a new 0.x version, but feels like a big deal to release a x.0 version.\r\n\r\nIt's not just how it feels: it also becomes much harder to work with version numbers like that. If my crate has a single public dependency, then I can no longer easily track which versions should be used together if I have to bump the major version every time the dependency does a patch release.\r\n\r\n> My impression is that the only way to get a pre-release version is to use an exact version requirement, so it seems consistent for it to be impossible to combine two different = requirements.\r\n\r\nYou can get pre-release versions with non-exact version requirements, you just have to mention the pre-release version in the requirement. (eg. `^1.2.0-alpha` will get you that pre-release version. The problem today is that it will automatically upgrade to `^1.2.0` when that is released.\r\n\r\n"}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/423742480", "html_url": "https://github.com/rust-lang/cargo/pull/6019#issuecomment-423742480", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/6019", "id": 423742480, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzc0MjQ4MA==", "user": {"login": "Diggsey", "id": 451321, "node_id": "MDQ6VXNlcjQ1MTMyMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/451321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Diggsey", "html_url": "https://github.com/Diggsey", "followers_url": "https://api.github.com/users/Diggsey/followers", "following_url": "https://api.github.com/users/Diggsey/following{/other_user}", "gists_url": "https://api.github.com/users/Diggsey/gists{/gist_id}", "starred_url": "https://api.github.com/users/Diggsey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Diggsey/subscriptions", "organizations_url": "https://api.github.com/users/Diggsey/orgs", "repos_url": "https://api.github.com/users/Diggsey/repos", "events_url": "https://api.github.com/users/Diggsey/events{/privacy}", "received_events_url": "https://api.github.com/users/Diggsey/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-22T12:59:20Z", "updated_at": "2018-09-22T12:59:20Z", "author_association": "NONE", "body": "There's also the issue that major versions imply a level of stability / long term support to users of the crate which is unwarranted in this case. Pre-release versions clearly indicate that there will likely be breaking changes in every release."}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/423751485", "html_url": "https://github.com/rust-lang/cargo/pull/6019#issuecomment-423751485", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/6019", "id": 423751485, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzc1MTQ4NQ==", "user": {"login": "withoutboats", "id": 9063376, "node_id": "MDQ6VXNlcjkwNjMzNzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/9063376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/withoutboats", "html_url": "https://github.com/withoutboats", "followers_url": "https://api.github.com/users/withoutboats/followers", "following_url": "https://api.github.com/users/withoutboats/following{/other_user}", "gists_url": "https://api.github.com/users/withoutboats/gists{/gist_id}", "starred_url": "https://api.github.com/users/withoutboats/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/withoutboats/subscriptions", "organizations_url": "https://api.github.com/users/withoutboats/orgs", "repos_url": "https://api.github.com/users/withoutboats/repos", "events_url": "https://api.github.com/users/withoutboats/events{/privacy}", "received_events_url": "https://api.github.com/users/withoutboats/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-22T15:23:07Z", "updated_at": "2018-09-22T15:23:20Z", "author_association": "CONTRIBUTOR", "body": "On consideration, I agree with Alex that we should only allow one of the \"forked paths\" to exist at a time. Consider the case where three crates depend on `1.0`, `1.1-alpha`, and `1.1-beta`; we've said that `1.0` unifies with either of the other two, but they don't unify with one another. Which version should the crate that depends on `1.0` get? It seems we'll have to select in an arbitrary way, and possibly that our selection could change between release. Seems bad.\r\n\r\n> Today this can never happen: regardless of what version (pre-release or otherwise) of C, A and B depend on, either the two versions of crate C are compatible (in which case the newer version will be chosen) or else they are incompatible (in which case crate C will be linked twice).\r\n\r\nIsn't this false because of the current behavior of prereleases (which you're trying to change)? I thought that currently they are treated as incompatible but are not linked twice, resulting in a hard error. Be careful not to overstate your case: you believe the behavior *should* be that crates are either compatible & unified or incompatible & linked multiple times, but unless I've misunderstood right now that isn't the behavior of cargo."}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/423753622", "html_url": "https://github.com/rust-lang/cargo/pull/6019#issuecomment-423753622", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/6019", "id": 423753622, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzc1MzYyMg==", "user": {"login": "Diggsey", "id": 451321, "node_id": "MDQ6VXNlcjQ1MTMyMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/451321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Diggsey", "html_url": "https://github.com/Diggsey", "followers_url": "https://api.github.com/users/Diggsey/followers", "following_url": "https://api.github.com/users/Diggsey/following{/other_user}", "gists_url": "https://api.github.com/users/Diggsey/gists{/gist_id}", "starred_url": "https://api.github.com/users/Diggsey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Diggsey/subscriptions", "organizations_url": "https://api.github.com/users/Diggsey/orgs", "repos_url": "https://api.github.com/users/Diggsey/repos", "events_url": "https://api.github.com/users/Diggsey/events{/privacy}", "received_events_url": "https://api.github.com/users/Diggsey/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-22T15:55:26Z", "updated_at": "2018-09-22T15:55:26Z", "author_association": "NONE", "body": "> Isn't this false because of the current behavior of prereleases (which you're trying to change)? I thought that currently they are treated as incompatible but are not linked twice, resulting in a hard error.\r\n\r\nAFAIK, pre-releases are currently treated as being compatible with each other, unless there is some secondary code path I'm unaware of - my PR is specifically to change that (make them incompatible) so that multiple versions can be linked together. Cargo uses the same function (is_compatible) to determine whether versions are compatible vs determine whether two versions can be linked together, so all pairs of crate versions are *either* compatible, *or* can be linked together by definition. This is what I meant by \"this cannot happen today\".\r\n\r\n> Consider the case where three crates depend on 1.0, 1.1-alpha, and 1.1-beta; we've said that 1.0 unifies with either of the other two, but they don't unify with one another. Which version should the crate that depends on 1.0 get? It seems we'll have to select in an arbitrary way, and possibly that our selection could change between release. Seems bad.\r\n\r\nThat's a good point, and I agree with that logic for pre-release minor versions of a crate: the requirement for minor versions to be compatible precludes including multiple forks in the same dependency graph.\r\n\r\nHowever, for pre-release major versions, there is no such requirement: there's no issue with 2.0.0-alpha being linked with 2.0.0-beta and even 2.0.0 itself - IMO, they should all be treated as though they were entirely separate major versions, like \"the 2.0 that could have been\".\r\n\r\n\r\n"}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/423753741", "html_url": "https://github.com/rust-lang/cargo/pull/6019#issuecomment-423753741", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/6019", "id": 423753741, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzc1Mzc0MQ==", "user": {"login": "withoutboats", "id": 9063376, "node_id": "MDQ6VXNlcjkwNjMzNzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/9063376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/withoutboats", "html_url": "https://github.com/withoutboats", "followers_url": "https://api.github.com/users/withoutboats/followers", "following_url": "https://api.github.com/users/withoutboats/following{/other_user}", "gists_url": "https://api.github.com/users/withoutboats/gists{/gist_id}", "starred_url": "https://api.github.com/users/withoutboats/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/withoutboats/subscriptions", "organizations_url": "https://api.github.com/users/withoutboats/orgs", "repos_url": "https://api.github.com/users/withoutboats/repos", "events_url": "https://api.github.com/users/withoutboats/events{/privacy}", "received_events_url": "https://api.github.com/users/withoutboats/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-22T15:57:19Z", "updated_at": "2018-09-22T15:57:19Z", "author_association": "CONTRIBUTOR", "body": "> However, for pre-release major versions, there is no such requirement: there's no issue with 2.0.0-alpha being linked with 2.0.0-beta and even 2.0.0 itself - IMO, they should all be treated as though they were entirely separate major versions, like \"the 2.0 that could have been\".\r\n\r\nPersonally I'm open to this, or even to limiting the error to when there is actually a lesser version compatible with both incompatible prerelease versions."}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/424061729", "html_url": "https://github.com/rust-lang/cargo/pull/6019#issuecomment-424061729", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/6019", "id": 424061729, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDA2MTcyOQ==", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars1.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-24T17:41:28Z", "updated_at": "2018-09-24T17:41:28Z", "author_association": "MEMBER", "body": "Much of this discussion is also i think highly indicative of where the Cargo team figured an RFC was good, but I can respond to a few points as well:\r\n\r\n> Hm, I'd much prefer it if we kept the notion we have today where crates are either compatible, or you can link multiple versions of them. \r\n\r\nOh for sure! That's what I intend to keep as well. I meant that if you request an alpha version the semver requirement won't match beta, so if those two versions are in a crate graph I'd advocate for the being considered compatible which results in no possible resolution graphs to satisfy our constraints (one must have beta, one must have alpha, they are considered distinct).\r\n\r\nEven for new pre-release major versions it seems to me that we'd want to consider them compatible in the sense of only requiring one in the crate graph. I'd imagine that all the same arguments apply for public dependencies and such"}]