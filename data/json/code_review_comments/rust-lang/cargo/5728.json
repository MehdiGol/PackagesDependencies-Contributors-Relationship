[{"url": "https://api.github.com/repos/rust-lang/cargo/pulls/comments/208388055", "pull_request_review_id": 144188270, "id": 208388055, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODM4ODA1NQ==", "diff_hunk": "@@ -0,0 +1,177 @@\n+use cargotest::support::{execs, project};", "path": "tests/testsuite/lints.rs", "position": null, "original_position": 1, "commit_id": "e6a64ea1e4f80fd3995fb052b87285d030047b91", "original_commit_id": "4652dcaaf90d4169f0c853e380d57d3f3ca08eb9", "user": {"login": "dwijnand", "id": 344610, "node_id": "MDQ6VXNlcjM0NDYxMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/344610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dwijnand", "html_url": "https://github.com/dwijnand", "followers_url": "https://api.github.com/users/dwijnand/followers", "following_url": "https://api.github.com/users/dwijnand/following{/other_user}", "gists_url": "https://api.github.com/users/dwijnand/gists{/gist_id}", "starred_url": "https://api.github.com/users/dwijnand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dwijnand/subscriptions", "organizations_url": "https://api.github.com/users/dwijnand/orgs", "repos_url": "https://api.github.com/users/dwijnand/repos", "events_url": "https://api.github.com/users/dwijnand/events{/privacy}", "received_events_url": "https://api.github.com/users/dwijnand/received_events", "type": "User", "site_admin": false}, "body": "The `cargotest::support` module is now just `support`, as of #5762.", "created_at": "2018-08-07T21:15:56Z", "updated_at": "2018-09-21T08:31:28Z", "html_url": "https://github.com/rust-lang/cargo/pull/5728#discussion_r208388055", "pull_request_url": "https://api.github.com/repos/rust-lang/cargo/pulls/5728", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/rust-lang/cargo/pulls/comments/208388055"}, "html": {"href": "https://github.com/rust-lang/cargo/pull/5728#discussion_r208388055"}, "pull_request": {"href": "https://api.github.com/repos/rust-lang/cargo/pulls/5728"}}}, {"url": "https://api.github.com/repos/rust-lang/cargo/pulls/comments/208390306", "pull_request_review_id": 144191057, "id": 208390306, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODM5MDMwNg==", "diff_hunk": "@@ -0,0 +1,177 @@\n+use cargotest::support::{execs, project};", "path": "tests/testsuite/lints.rs", "position": null, "original_position": 1, "commit_id": "e6a64ea1e4f80fd3995fb052b87285d030047b91", "original_commit_id": "4652dcaaf90d4169f0c853e380d57d3f3ca08eb9", "user": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "body": "Thanks, didn't expect that not rebasing would cause such issues", "created_at": "2018-08-07T21:24:31Z", "updated_at": "2018-09-21T08:31:28Z", "html_url": "https://github.com/rust-lang/cargo/pull/5728#discussion_r208390306", "pull_request_url": "https://api.github.com/repos/rust-lang/cargo/pulls/5728", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/rust-lang/cargo/pulls/comments/208390306"}, "html": {"href": "https://github.com/rust-lang/cargo/pull/5728#discussion_r208390306"}, "pull_request": {"href": "https://api.github.com/repos/rust-lang/cargo/pulls/5728"}}, "in_reply_to_id": 208388055}, {"url": "https://api.github.com/repos/rust-lang/cargo/pulls/comments/208393977", "pull_request_review_id": 144195303, "id": 208393977, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODM5Mzk3Nw==", "diff_hunk": "@@ -0,0 +1,177 @@\n+use cargotest::support::{execs, project};", "path": "tests/testsuite/lints.rs", "position": null, "original_position": 1, "commit_id": "e6a64ea1e4f80fd3995fb052b87285d030047b91", "original_commit_id": "4652dcaaf90d4169f0c853e380d57d3f3ca08eb9", "user": {"login": "dwijnand", "id": 344610, "node_id": "MDQ6VXNlcjM0NDYxMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/344610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dwijnand", "html_url": "https://github.com/dwijnand", "followers_url": "https://api.github.com/users/dwijnand/followers", "following_url": "https://api.github.com/users/dwijnand/following{/other_user}", "gists_url": "https://api.github.com/users/dwijnand/gists{/gist_id}", "starred_url": "https://api.github.com/users/dwijnand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dwijnand/subscriptions", "organizations_url": "https://api.github.com/users/dwijnand/orgs", "repos_url": "https://api.github.com/users/dwijnand/repos", "events_url": "https://api.github.com/users/dwijnand/events{/privacy}", "received_events_url": "https://api.github.com/users/dwijnand/received_events", "type": "User", "site_admin": false}, "body": "Yeah it does because CI tests the merge of this PR branch with the (current) state of the target branch (where the merge has happened).", "created_at": "2018-08-07T21:37:54Z", "updated_at": "2018-09-21T08:31:28Z", "html_url": "https://github.com/rust-lang/cargo/pull/5728#discussion_r208393977", "pull_request_url": "https://api.github.com/repos/rust-lang/cargo/pulls/5728", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/rust-lang/cargo/pulls/comments/208393977"}, "html": {"href": "https://github.com/rust-lang/cargo/pull/5728#discussion_r208393977"}, "pull_request": {"href": "https://api.github.com/repos/rust-lang/cargo/pulls/5728"}}, "in_reply_to_id": 208388055}, {"url": "https://api.github.com/repos/rust-lang/cargo/pulls/comments/211317576", "pull_request_review_id": 147712629, "id": 211317576, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMTMxNzU3Ng==", "diff_hunk": "@@ -240,6 +241,9 @@ pub struct TomlManifest {\n     patch: Option<BTreeMap<String, BTreeMap<String, TomlDependency>>>,\n     workspace: Option<TomlWorkspace>,\n     badges: Option<BTreeMap<String, BTreeMap<String, String>>>,\n+    lints: Option<BTreeMap<String, String>>,\n+    #[serde(rename = \"lints2\")]", "path": "src/cargo/util/toml/mod.rs", "position": 13, "original_position": 13, "commit_id": "e6a64ea1e4f80fd3995fb052b87285d030047b91", "original_commit_id": "88e21f89d41b112e2957079b7da4a27d2ea90b23", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars1.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "body": "I'm not entirely clear on what the `lints2` name is doing here, can you add a comment to the naming choice here?", "created_at": "2018-08-20T16:02:46Z", "updated_at": "2018-09-21T08:31:28Z", "html_url": "https://github.com/rust-lang/cargo/pull/5728#discussion_r211317576", "pull_request_url": "https://api.github.com/repos/rust-lang/cargo/pulls/5728", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/rust-lang/cargo/pulls/comments/211317576"}, "html": {"href": "https://github.com/rust-lang/cargo/pull/5728#discussion_r211317576"}, "pull_request": {"href": "https://api.github.com/repos/rust-lang/cargo/pulls/5728"}}}, {"url": "https://api.github.com/repos/rust-lang/cargo/pulls/comments/211318243", "pull_request_review_id": 147712629, "id": 211318243, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMTMxODI0Mw==", "diff_hunk": "@@ -0,0 +1,88 @@\n+use std::collections::BTreeMap;\n+use std::collections::HashSet;\n+use std::str::FromStr;\n+\n+use util::{Cfg, CfgExpr, ProcessBuilder};\n+use util::errors::CargoResult;\n+\n+#[derive(Clone, PartialEq, Debug)]\n+enum LintKind {\n+    Allow,\n+    Warn,\n+    Deny,\n+    Forbid,\n+}\n+\n+impl LintKind {\n+    pub fn try_from_string(lint_state: &str) -> Option<LintKind> {\n+        match lint_state.as_ref() {\n+            \"allow\" => Some(LintKind::Allow),\n+            \"warn\" => Some(LintKind::Warn),\n+            \"deny\" => Some(LintKind::Deny),\n+            \"forbid\" => Some(LintKind::Forbid),\n+            _ => None,\n+        }\n+    }\n+\n+    pub fn flag(&self) -> char {\n+        match self {\n+            LintKind::Allow => 'A',\n+            LintKind::Warn => 'W',\n+            LintKind::Deny => 'D',\n+            LintKind::Forbid => 'F',\n+        }\n+    }\n+}\n+\n+#[derive(Clone, Debug)]\n+pub struct Lints {\n+    lints: Vec<(String, LintKind)>,\n+    cfg: Option<CfgExpr>,\n+}\n+\n+impl Lints {\n+    pub fn new(\n+        cfg: Option<&String>,\n+        manifest_lints: &BTreeMap<String, String>,\n+        warnings: &mut Vec<String>,\n+    ) -> CargoResult<Lints> {\n+        let cfg = if let Some(t) = cfg {\n+            if t.starts_with(\"cfg(\") && t.ends_with(')') {\n+                Some(CfgExpr::from_str(&t[4..t.len() - 1])?)\n+            } else {\n+                bail!(\"expected `cfg(...)`, found {}\", t)\n+            }\n+        } else {\n+            None\n+        };\n+\n+        let mut lints = vec![];\n+        for (lint_name, lint_state) in manifest_lints.iter() {\n+            if let Some(state) = LintKind::try_from_string(lint_state) {\n+                lints.push((lint_name.to_string(), state));\n+            } else {\n+                warnings.push(format!(\n+                    \"invalid lint state for `{}` (expected `warn`, `allow`, `deny` or `forbid`)\",\n+                    lint_name\n+                ));\n+            }\n+        }\n+        Ok(Lints { lints, cfg })\n+    }\n+\n+    pub fn set_lint_flags(&self, unit_cfg: &[Cfg], features: &HashSet<String>, cmd: &mut ProcessBuilder) {\n+        match self.cfg {\n+            None => self.set_flags(cmd),\n+            Some(CfgExpr::Value(Cfg::KeyPair(ref key, ref value)))", "path": "src/cargo/core/lints.rs", "position": 76, "original_position": 76, "commit_id": "e6a64ea1e4f80fd3995fb052b87285d030047b91", "original_commit_id": "88e21f89d41b112e2957079b7da4a27d2ea90b23", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars1.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "body": "I think we've already got a number of `#[cfg]` matching functions throughout Cargo, could those be reused here?", "created_at": "2018-08-20T16:04:45Z", "updated_at": "2018-09-21T08:31:28Z", "html_url": "https://github.com/rust-lang/cargo/pull/5728#discussion_r211318243", "pull_request_url": "https://api.github.com/repos/rust-lang/cargo/pulls/5728", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/rust-lang/cargo/pulls/comments/211318243"}, "html": {"href": "https://github.com/rust-lang/cargo/pull/5728#discussion_r211318243"}, "pull_request": {"href": "https://api.github.com/repos/rust-lang/cargo/pulls/5728"}}}, {"url": "https://api.github.com/repos/rust-lang/cargo/pulls/comments/211318498", "pull_request_review_id": 147712629, "id": 211318498, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMTMxODQ5OA==", "diff_hunk": "@@ -0,0 +1,210 @@\n+use support::{execs, project};\n+use support::hamcrest::assert_that;\n+\n+#[test]\n+fn deny() {\n+    let p = project()\n+        .file(\n+            \"Cargo.toml\",\n+            r#\"\n+            [package]\n+            name = \"foo\"\n+            version = \"0.0.1\"\n+            authors = []\n+\n+            [lints]\n+            dead_code = \"deny\"\n+        \"#,\n+        )\n+        .file(\"src/lib.rs\", \"fn foo() {}\")\n+        .build();\n+\n+    assert_that(\n+        p.cargo(\"build\"),\n+        execs()\n+            .with_status(101)\n+            .with_stderr_contains(\"[..]error: function is never used: `foo`[..]\"),\n+    );\n+}\n+\n+#[test]\n+fn empty_lints_block() {\n+    let p = project()\n+        .file(\n+            \"Cargo.toml\",\n+            r#\"\n+            [package]\n+            name = \"foo\"\n+            version = \"0.0.1\"\n+            authors = []\n+\n+            [lints]\n+        \"#,\n+        )\n+        .file(\"src/lib.rs\", \"fn foo() {}\")\n+        .build();\n+\n+    assert_that(\n+        p.cargo(\"build\"),\n+        execs().with_status(0),\n+    );\n+}\n+\n+#[test]\n+fn invalid_state() {\n+    let p = project()\n+        .file(\n+            \"Cargo.toml\",\n+            r#\"\n+            [package]\n+            name = \"foo\"\n+            version = \"0.0.1\"\n+            authors = []\n+\n+            [lints]\n+            non_snake_case = \"something something\"\n+        \"#,\n+        )\n+        .file(\"src/lib.rs\", \"fn foo() {}\")\n+        .build();\n+\n+    assert_that(\n+        p.cargo(\"build\"),\n+        execs().with_status(0),\n+    );\n+}\n+\n+#[test]\n+fn virtual_workspace() {\n+    let p = project()\n+        .file(\n+            \"Cargo.toml\",\n+            r#\"\n+            [workspace]\n+            members = [\"bar\"]\n+\n+            [lints]\n+            dead_code = \"deny\"\n+        \"#,\n+        )\n+        .file(\n+            \"bar/Cargo.toml\",\n+            r#\"\n+            [project]\n+            name = \"bar\"\n+            version = \"0.1.0\"\n+            authors = []\n+        \"#,\n+        )\n+        .file(\"bar/src/lib.rs\", \"fn baz() {}\")\n+        .build();\n+\n+    assert_that(\n+        p.cargo(\"build\"),\n+        execs()\n+            .with_status(101)\n+            .with_stderr_contains(\"[..]error: function is never used: `baz`[..]\"),\n+    );\n+}\n+\n+#[test]\n+fn member_workspace() {\n+    let p = project()\n+        .file(\n+            \"Cargo.toml\",\n+            r#\"\n+            [workspace]\n+            members = [\"bar\"]\n+        \"#,\n+        )\n+        .file(\n+            \"bar/Cargo.toml\",\n+            r#\"\n+            [project]\n+            name = \"bar\"\n+            version = \"0.1.0\"\n+            authors = []\n+\n+            [lints]\n+            dead_code = \"deny\"\n+        \"#,\n+        )\n+        .file(\"bar/src/lib.rs\", \"fn baz() {}\")\n+        .build();\n+\n+    assert_that(\n+        p.cargo(\"build\"),\n+        execs()\n+            .with_status(101)\n+            .with_stderr_contains(\"[..]error: function is never used: `baz`[..]\"),\n+    );\n+}\n+\n+#[test]\n+fn virtual_workspace_overrides() {\n+    let p = project()\n+        .file(\n+            \"Cargo.toml\",\n+            r#\"\n+            [workspace]\n+            members = [\"bar\"]\n+\n+            [lints]\n+            dead_code = \"deny\"\n+        \"#,\n+        )\n+        .file(\n+            \"bar/Cargo.toml\",\n+            r#\"\n+            [project]\n+            name = \"bar\"\n+            version = \"0.1.0\"\n+            authors = []\n+\n+            [lints]\n+            dead_code = \"allow\"", "path": "tests/testsuite/lints.rs", "position": 152, "original_position": 165, "commit_id": "e6a64ea1e4f80fd3995fb052b87285d030047b91", "original_commit_id": "88e21f89d41b112e2957079b7da4a27d2ea90b23", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars1.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "body": "I wonder if it would perhaps be more ergonomic to do something like:\r\n\r\n```toml\r\n[lints]\r\nallow = ['dead_code', ...]\r\n```\r\n\r\nwhere the level is only specified once?", "created_at": "2018-08-20T16:05:31Z", "updated_at": "2018-09-21T08:31:28Z", "html_url": "https://github.com/rust-lang/cargo/pull/5728#discussion_r211318498", "pull_request_url": "https://api.github.com/repos/rust-lang/cargo/pulls/5728", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/rust-lang/cargo/pulls/comments/211318498"}, "html": {"href": "https://github.com/rust-lang/cargo/pull/5728#discussion_r211318498"}, "pull_request": {"href": "https://api.github.com/repos/rust-lang/cargo/pulls/5728"}}}, {"url": "https://api.github.com/repos/rust-lang/cargo/pulls/comments/211342000", "pull_request_review_id": 147741766, "id": 211342000, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMTM0MjAwMA==", "diff_hunk": "@@ -240,6 +241,9 @@ pub struct TomlManifest {\n     patch: Option<BTreeMap<String, BTreeMap<String, TomlDependency>>>,\n     workspace: Option<TomlWorkspace>,\n     badges: Option<BTreeMap<String, BTreeMap<String, String>>>,\n+    lints: Option<BTreeMap<String, String>>,\n+    #[serde(rename = \"lints2\")]", "path": "src/cargo/util/toml/mod.rs", "position": 13, "original_position": 13, "commit_id": "e6a64ea1e4f80fd3995fb052b87285d030047b91", "original_commit_id": "88e21f89d41b112e2957079b7da4a27d2ea90b23", "user": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "body": "Ah, I haven't figured out yet how to deserialize both `[lints]` and `[lints.'cfg(...)']` correctly, so I just temporarily named it something else (sorry!). Just using `#[serde(rename = \"lints\")]` here doesn't work, so it probably needs a custom Deserialize impl.", "created_at": "2018-08-20T17:21:57Z", "updated_at": "2018-09-21T08:31:28Z", "html_url": "https://github.com/rust-lang/cargo/pull/5728#discussion_r211342000", "pull_request_url": "https://api.github.com/repos/rust-lang/cargo/pulls/5728", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/rust-lang/cargo/pulls/comments/211342000"}, "html": {"href": "https://github.com/rust-lang/cargo/pull/5728#discussion_r211342000"}, "pull_request": {"href": "https://api.github.com/repos/rust-lang/cargo/pulls/5728"}}, "in_reply_to_id": 211317576}, {"url": "https://api.github.com/repos/rust-lang/cargo/pulls/comments/211343729", "pull_request_review_id": 147743821, "id": 211343729, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMTM0MzcyOQ==", "diff_hunk": "@@ -0,0 +1,210 @@\n+use support::{execs, project};\n+use support::hamcrest::assert_that;\n+\n+#[test]\n+fn deny() {\n+    let p = project()\n+        .file(\n+            \"Cargo.toml\",\n+            r#\"\n+            [package]\n+            name = \"foo\"\n+            version = \"0.0.1\"\n+            authors = []\n+\n+            [lints]\n+            dead_code = \"deny\"\n+        \"#,\n+        )\n+        .file(\"src/lib.rs\", \"fn foo() {}\")\n+        .build();\n+\n+    assert_that(\n+        p.cargo(\"build\"),\n+        execs()\n+            .with_status(101)\n+            .with_stderr_contains(\"[..]error: function is never used: `foo`[..]\"),\n+    );\n+}\n+\n+#[test]\n+fn empty_lints_block() {\n+    let p = project()\n+        .file(\n+            \"Cargo.toml\",\n+            r#\"\n+            [package]\n+            name = \"foo\"\n+            version = \"0.0.1\"\n+            authors = []\n+\n+            [lints]\n+        \"#,\n+        )\n+        .file(\"src/lib.rs\", \"fn foo() {}\")\n+        .build();\n+\n+    assert_that(\n+        p.cargo(\"build\"),\n+        execs().with_status(0),\n+    );\n+}\n+\n+#[test]\n+fn invalid_state() {\n+    let p = project()\n+        .file(\n+            \"Cargo.toml\",\n+            r#\"\n+            [package]\n+            name = \"foo\"\n+            version = \"0.0.1\"\n+            authors = []\n+\n+            [lints]\n+            non_snake_case = \"something something\"\n+        \"#,\n+        )\n+        .file(\"src/lib.rs\", \"fn foo() {}\")\n+        .build();\n+\n+    assert_that(\n+        p.cargo(\"build\"),\n+        execs().with_status(0),\n+    );\n+}\n+\n+#[test]\n+fn virtual_workspace() {\n+    let p = project()\n+        .file(\n+            \"Cargo.toml\",\n+            r#\"\n+            [workspace]\n+            members = [\"bar\"]\n+\n+            [lints]\n+            dead_code = \"deny\"\n+        \"#,\n+        )\n+        .file(\n+            \"bar/Cargo.toml\",\n+            r#\"\n+            [project]\n+            name = \"bar\"\n+            version = \"0.1.0\"\n+            authors = []\n+        \"#,\n+        )\n+        .file(\"bar/src/lib.rs\", \"fn baz() {}\")\n+        .build();\n+\n+    assert_that(\n+        p.cargo(\"build\"),\n+        execs()\n+            .with_status(101)\n+            .with_stderr_contains(\"[..]error: function is never used: `baz`[..]\"),\n+    );\n+}\n+\n+#[test]\n+fn member_workspace() {\n+    let p = project()\n+        .file(\n+            \"Cargo.toml\",\n+            r#\"\n+            [workspace]\n+            members = [\"bar\"]\n+        \"#,\n+        )\n+        .file(\n+            \"bar/Cargo.toml\",\n+            r#\"\n+            [project]\n+            name = \"bar\"\n+            version = \"0.1.0\"\n+            authors = []\n+\n+            [lints]\n+            dead_code = \"deny\"\n+        \"#,\n+        )\n+        .file(\"bar/src/lib.rs\", \"fn baz() {}\")\n+        .build();\n+\n+    assert_that(\n+        p.cargo(\"build\"),\n+        execs()\n+            .with_status(101)\n+            .with_stderr_contains(\"[..]error: function is never used: `baz`[..]\"),\n+    );\n+}\n+\n+#[test]\n+fn virtual_workspace_overrides() {\n+    let p = project()\n+        .file(\n+            \"Cargo.toml\",\n+            r#\"\n+            [workspace]\n+            members = [\"bar\"]\n+\n+            [lints]\n+            dead_code = \"deny\"\n+        \"#,\n+        )\n+        .file(\n+            \"bar/Cargo.toml\",\n+            r#\"\n+            [project]\n+            name = \"bar\"\n+            version = \"0.1.0\"\n+            authors = []\n+\n+            [lints]\n+            dead_code = \"allow\"", "path": "tests/testsuite/lints.rs", "position": 152, "original_position": 165, "commit_id": "e6a64ea1e4f80fd3995fb052b87285d030047b91", "original_commit_id": "88e21f89d41b112e2957079b7da4a27d2ea90b23", "user": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "body": "Maybe, but this notation would allow for lint configurations more easily, as discussed in #5034. Though maybe that's a bit too far off to take into account?", "created_at": "2018-08-20T17:26:37Z", "updated_at": "2018-09-21T08:31:28Z", "html_url": "https://github.com/rust-lang/cargo/pull/5728#discussion_r211343729", "pull_request_url": "https://api.github.com/repos/rust-lang/cargo/pulls/5728", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/rust-lang/cargo/pulls/comments/211343729"}, "html": {"href": "https://github.com/rust-lang/cargo/pull/5728#discussion_r211343729"}, "pull_request": {"href": "https://api.github.com/repos/rust-lang/cargo/pulls/5728"}}, "in_reply_to_id": 211318498}, {"url": "https://api.github.com/repos/rust-lang/cargo/pulls/comments/211350549", "pull_request_review_id": 147751784, "id": 211350549, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMTM1MDU0OQ==", "diff_hunk": "@@ -0,0 +1,88 @@\n+use std::collections::BTreeMap;\n+use std::collections::HashSet;\n+use std::str::FromStr;\n+\n+use util::{Cfg, CfgExpr, ProcessBuilder};\n+use util::errors::CargoResult;\n+\n+#[derive(Clone, PartialEq, Debug)]\n+enum LintKind {\n+    Allow,\n+    Warn,\n+    Deny,\n+    Forbid,\n+}\n+\n+impl LintKind {\n+    pub fn try_from_string(lint_state: &str) -> Option<LintKind> {\n+        match lint_state.as_ref() {\n+            \"allow\" => Some(LintKind::Allow),\n+            \"warn\" => Some(LintKind::Warn),\n+            \"deny\" => Some(LintKind::Deny),\n+            \"forbid\" => Some(LintKind::Forbid),\n+            _ => None,\n+        }\n+    }\n+\n+    pub fn flag(&self) -> char {\n+        match self {\n+            LintKind::Allow => 'A',\n+            LintKind::Warn => 'W',\n+            LintKind::Deny => 'D',\n+            LintKind::Forbid => 'F',\n+        }\n+    }\n+}\n+\n+#[derive(Clone, Debug)]\n+pub struct Lints {\n+    lints: Vec<(String, LintKind)>,\n+    cfg: Option<CfgExpr>,\n+}\n+\n+impl Lints {\n+    pub fn new(\n+        cfg: Option<&String>,\n+        manifest_lints: &BTreeMap<String, String>,\n+        warnings: &mut Vec<String>,\n+    ) -> CargoResult<Lints> {\n+        let cfg = if let Some(t) = cfg {\n+            if t.starts_with(\"cfg(\") && t.ends_with(')') {\n+                Some(CfgExpr::from_str(&t[4..t.len() - 1])?)\n+            } else {\n+                bail!(\"expected `cfg(...)`, found {}\", t)\n+            }\n+        } else {\n+            None\n+        };\n+\n+        let mut lints = vec![];\n+        for (lint_name, lint_state) in manifest_lints.iter() {\n+            if let Some(state) = LintKind::try_from_string(lint_state) {\n+                lints.push((lint_name.to_string(), state));\n+            } else {\n+                warnings.push(format!(\n+                    \"invalid lint state for `{}` (expected `warn`, `allow`, `deny` or `forbid`)\",\n+                    lint_name\n+                ));\n+            }\n+        }\n+        Ok(Lints { lints, cfg })\n+    }\n+\n+    pub fn set_lint_flags(&self, unit_cfg: &[Cfg], features: &HashSet<String>, cmd: &mut ProcessBuilder) {\n+        match self.cfg {\n+            None => self.set_flags(cmd),\n+            Some(CfgExpr::Value(Cfg::KeyPair(ref key, ref value)))", "path": "src/cargo/core/lints.rs", "position": 76, "original_position": 76, "commit_id": "e6a64ea1e4f80fd3995fb052b87285d030047b91", "original_commit_id": "88e21f89d41b112e2957079b7da4a27d2ea90b23", "user": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "body": "I don't see one that could be used here, except maybe the `CfgExpr::matches` function that is used in the next line. The way I wrote it seems simpler than wrapping all feature strings inside `Cfg::KeyPair`, unless `feature = foo` keypairs can be nested inside other `CfgExpr`'s?", "created_at": "2018-08-20T17:48:19Z", "updated_at": "2018-09-21T08:31:28Z", "html_url": "https://github.com/rust-lang/cargo/pull/5728#discussion_r211350549", "pull_request_url": "https://api.github.com/repos/rust-lang/cargo/pulls/5728", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/rust-lang/cargo/pulls/comments/211350549"}, "html": {"href": "https://github.com/rust-lang/cargo/pull/5728#discussion_r211350549"}, "pull_request": {"href": "https://api.github.com/repos/rust-lang/cargo/pulls/5728"}}, "in_reply_to_id": 211318243}, {"url": "https://api.github.com/repos/rust-lang/cargo/pulls/comments/212411138", "pull_request_review_id": 149039217, "id": 212411138, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjQxMTEzOA==", "diff_hunk": "@@ -0,0 +1,210 @@\n+use support::{execs, project};\n+use support::hamcrest::assert_that;\n+\n+#[test]\n+fn deny() {\n+    let p = project()\n+        .file(\n+            \"Cargo.toml\",\n+            r#\"\n+            [package]\n+            name = \"foo\"\n+            version = \"0.0.1\"\n+            authors = []\n+\n+            [lints]\n+            dead_code = \"deny\"\n+        \"#,\n+        )\n+        .file(\"src/lib.rs\", \"fn foo() {}\")\n+        .build();\n+\n+    assert_that(\n+        p.cargo(\"build\"),\n+        execs()\n+            .with_status(101)\n+            .with_stderr_contains(\"[..]error: function is never used: `foo`[..]\"),\n+    );\n+}\n+\n+#[test]\n+fn empty_lints_block() {\n+    let p = project()\n+        .file(\n+            \"Cargo.toml\",\n+            r#\"\n+            [package]\n+            name = \"foo\"\n+            version = \"0.0.1\"\n+            authors = []\n+\n+            [lints]\n+        \"#,\n+        )\n+        .file(\"src/lib.rs\", \"fn foo() {}\")\n+        .build();\n+\n+    assert_that(\n+        p.cargo(\"build\"),\n+        execs().with_status(0),\n+    );\n+}\n+\n+#[test]\n+fn invalid_state() {\n+    let p = project()\n+        .file(\n+            \"Cargo.toml\",\n+            r#\"\n+            [package]\n+            name = \"foo\"\n+            version = \"0.0.1\"\n+            authors = []\n+\n+            [lints]\n+            non_snake_case = \"something something\"\n+        \"#,\n+        )\n+        .file(\"src/lib.rs\", \"fn foo() {}\")\n+        .build();\n+\n+    assert_that(\n+        p.cargo(\"build\"),\n+        execs().with_status(0),\n+    );\n+}\n+\n+#[test]\n+fn virtual_workspace() {\n+    let p = project()\n+        .file(\n+            \"Cargo.toml\",\n+            r#\"\n+            [workspace]\n+            members = [\"bar\"]\n+\n+            [lints]\n+            dead_code = \"deny\"\n+        \"#,\n+        )\n+        .file(\n+            \"bar/Cargo.toml\",\n+            r#\"\n+            [project]\n+            name = \"bar\"\n+            version = \"0.1.0\"\n+            authors = []\n+        \"#,\n+        )\n+        .file(\"bar/src/lib.rs\", \"fn baz() {}\")\n+        .build();\n+\n+    assert_that(\n+        p.cargo(\"build\"),\n+        execs()\n+            .with_status(101)\n+            .with_stderr_contains(\"[..]error: function is never used: `baz`[..]\"),\n+    );\n+}\n+\n+#[test]\n+fn member_workspace() {\n+    let p = project()\n+        .file(\n+            \"Cargo.toml\",\n+            r#\"\n+            [workspace]\n+            members = [\"bar\"]\n+        \"#,\n+        )\n+        .file(\n+            \"bar/Cargo.toml\",\n+            r#\"\n+            [project]\n+            name = \"bar\"\n+            version = \"0.1.0\"\n+            authors = []\n+\n+            [lints]\n+            dead_code = \"deny\"\n+        \"#,\n+        )\n+        .file(\"bar/src/lib.rs\", \"fn baz() {}\")\n+        .build();\n+\n+    assert_that(\n+        p.cargo(\"build\"),\n+        execs()\n+            .with_status(101)\n+            .with_stderr_contains(\"[..]error: function is never used: `baz`[..]\"),\n+    );\n+}\n+\n+#[test]\n+fn virtual_workspace_overrides() {\n+    let p = project()\n+        .file(\n+            \"Cargo.toml\",\n+            r#\"\n+            [workspace]\n+            members = [\"bar\"]\n+\n+            [lints]\n+            dead_code = \"deny\"\n+        \"#,\n+        )\n+        .file(\n+            \"bar/Cargo.toml\",\n+            r#\"\n+            [project]\n+            name = \"bar\"\n+            version = \"0.1.0\"\n+            authors = []\n+\n+            [lints]\n+            dead_code = \"allow\"", "path": "tests/testsuite/lints.rs", "position": 152, "original_position": 165, "commit_id": "e6a64ea1e4f80fd3995fb052b87285d030047b91", "original_commit_id": "88e21f89d41b112e2957079b7da4a27d2ea90b23", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars1.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "body": "ah ok, that seems reasonable", "created_at": "2018-08-23T18:25:06Z", "updated_at": "2018-09-21T08:31:28Z", "html_url": "https://github.com/rust-lang/cargo/pull/5728#discussion_r212411138", "pull_request_url": "https://api.github.com/repos/rust-lang/cargo/pulls/5728", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/rust-lang/cargo/pulls/comments/212411138"}, "html": {"href": "https://github.com/rust-lang/cargo/pull/5728#discussion_r212411138"}, "pull_request": {"href": "https://api.github.com/repos/rust-lang/cargo/pulls/5728"}}, "in_reply_to_id": 211318498}, {"url": "https://api.github.com/repos/rust-lang/cargo/pulls/comments/212411294", "pull_request_review_id": 149039424, "id": 212411294, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjQxMTI5NA==", "diff_hunk": "@@ -240,6 +241,9 @@ pub struct TomlManifest {\n     patch: Option<BTreeMap<String, BTreeMap<String, TomlDependency>>>,\n     workspace: Option<TomlWorkspace>,\n     badges: Option<BTreeMap<String, BTreeMap<String, String>>>,\n+    lints: Option<BTreeMap<String, String>>,\n+    #[serde(rename = \"lints2\")]", "path": "src/cargo/util/toml/mod.rs", "position": 13, "original_position": 13, "commit_id": "e6a64ea1e4f80fd3995fb052b87285d030047b91", "original_commit_id": "88e21f89d41b112e2957079b7da4a27d2ea90b23", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars1.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "body": "Hm ok, I'm not really sure we'd want to support `cfg(..)` for lint configurations though in the sense that it feels like it's a bit overkill for configuration that can otherwise be specific in the crate source anyway?", "created_at": "2018-08-23T18:25:35Z", "updated_at": "2018-09-21T08:31:28Z", "html_url": "https://github.com/rust-lang/cargo/pull/5728#discussion_r212411294", "pull_request_url": "https://api.github.com/repos/rust-lang/cargo/pulls/5728", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/rust-lang/cargo/pulls/comments/212411294"}, "html": {"href": "https://github.com/rust-lang/cargo/pull/5728#discussion_r212411294"}, "pull_request": {"href": "https://api.github.com/repos/rust-lang/cargo/pulls/5728"}}, "in_reply_to_id": 211317576}, {"url": "https://api.github.com/repos/rust-lang/cargo/pulls/comments/212411609", "pull_request_review_id": 149039831, "id": 212411609, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjQxMTYwOQ==", "diff_hunk": "@@ -0,0 +1,88 @@\n+use std::collections::BTreeMap;\n+use std::collections::HashSet;\n+use std::str::FromStr;\n+\n+use util::{Cfg, CfgExpr, ProcessBuilder};\n+use util::errors::CargoResult;\n+\n+#[derive(Clone, PartialEq, Debug)]\n+enum LintKind {\n+    Allow,\n+    Warn,\n+    Deny,\n+    Forbid,\n+}\n+\n+impl LintKind {\n+    pub fn try_from_string(lint_state: &str) -> Option<LintKind> {\n+        match lint_state.as_ref() {\n+            \"allow\" => Some(LintKind::Allow),\n+            \"warn\" => Some(LintKind::Warn),\n+            \"deny\" => Some(LintKind::Deny),\n+            \"forbid\" => Some(LintKind::Forbid),\n+            _ => None,\n+        }\n+    }\n+\n+    pub fn flag(&self) -> char {\n+        match self {\n+            LintKind::Allow => 'A',\n+            LintKind::Warn => 'W',\n+            LintKind::Deny => 'D',\n+            LintKind::Forbid => 'F',\n+        }\n+    }\n+}\n+\n+#[derive(Clone, Debug)]\n+pub struct Lints {\n+    lints: Vec<(String, LintKind)>,\n+    cfg: Option<CfgExpr>,\n+}\n+\n+impl Lints {\n+    pub fn new(\n+        cfg: Option<&String>,\n+        manifest_lints: &BTreeMap<String, String>,\n+        warnings: &mut Vec<String>,\n+    ) -> CargoResult<Lints> {\n+        let cfg = if let Some(t) = cfg {\n+            if t.starts_with(\"cfg(\") && t.ends_with(')') {\n+                Some(CfgExpr::from_str(&t[4..t.len() - 1])?)\n+            } else {\n+                bail!(\"expected `cfg(...)`, found {}\", t)\n+            }\n+        } else {\n+            None\n+        };\n+\n+        let mut lints = vec![];\n+        for (lint_name, lint_state) in manifest_lints.iter() {\n+            if let Some(state) = LintKind::try_from_string(lint_state) {\n+                lints.push((lint_name.to_string(), state));\n+            } else {\n+                warnings.push(format!(\n+                    \"invalid lint state for `{}` (expected `warn`, `allow`, `deny` or `forbid`)\",\n+                    lint_name\n+                ));\n+            }\n+        }\n+        Ok(Lints { lints, cfg })\n+    }\n+\n+    pub fn set_lint_flags(&self, unit_cfg: &[Cfg], features: &HashSet<String>, cmd: &mut ProcessBuilder) {\n+        match self.cfg {\n+            None => self.set_flags(cmd),\n+            Some(CfgExpr::Value(Cfg::KeyPair(ref key, ref value)))", "path": "src/cargo/core/lints.rs", "position": 76, "original_position": 76, "commit_id": "e6a64ea1e4f80fd3995fb052b87285d030047b91", "original_commit_id": "88e21f89d41b112e2957079b7da4a27d2ea90b23", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars1.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "body": "I think we'll want to funnel everything through `matches` to ensure it's consistently appplied", "created_at": "2018-08-23T18:26:35Z", "updated_at": "2018-09-21T08:31:28Z", "html_url": "https://github.com/rust-lang/cargo/pull/5728#discussion_r212411609", "pull_request_url": "https://api.github.com/repos/rust-lang/cargo/pulls/5728", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/rust-lang/cargo/pulls/comments/212411609"}, "html": {"href": "https://github.com/rust-lang/cargo/pull/5728#discussion_r212411609"}, "pull_request": {"href": "https://api.github.com/repos/rust-lang/cargo/pulls/5728"}}, "in_reply_to_id": 211318243}, {"url": "https://api.github.com/repos/rust-lang/cargo/pulls/comments/219416975", "pull_request_review_id": 157587326, "id": 219416975, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTQxNjk3NQ==", "diff_hunk": "@@ -240,6 +241,9 @@ pub struct TomlManifest {\n     patch: Option<BTreeMap<String, BTreeMap<String, TomlDependency>>>,\n     workspace: Option<TomlWorkspace>,\n     badges: Option<BTreeMap<String, BTreeMap<String, String>>>,\n+    lints: Option<BTreeMap<String, String>>,\n+    #[serde(rename = \"lints2\")]", "path": "src/cargo/util/toml/mod.rs", "position": 13, "original_position": 13, "commit_id": "e6a64ea1e4f80fd3995fb052b87285d030047b91", "original_commit_id": "88e21f89d41b112e2957079b7da4a27d2ea90b23", "user": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "body": "Right, let's simplify to just a `[lints]` section then.", "created_at": "2018-09-21T08:17:00Z", "updated_at": "2018-09-21T08:31:28Z", "html_url": "https://github.com/rust-lang/cargo/pull/5728#discussion_r219416975", "pull_request_url": "https://api.github.com/repos/rust-lang/cargo/pulls/5728", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/rust-lang/cargo/pulls/comments/219416975"}, "html": {"href": "https://github.com/rust-lang/cargo/pull/5728#discussion_r219416975"}, "pull_request": {"href": "https://api.github.com/repos/rust-lang/cargo/pulls/5728"}}, "in_reply_to_id": 211317576}]