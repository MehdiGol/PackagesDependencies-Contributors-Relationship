[{"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/424792998", "html_url": "https://github.com/rust-lang/cargo/issues/6100#issuecomment-424792998", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/6100", "id": 424792998, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDc5Mjk5OA==", "user": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-26T16:59:43Z", "updated_at": "2018-09-26T16:59:43Z", "author_association": "MEMBER", "body": "I *do* think it makes sense to keep these separate. I like the idea of having `--out-dir` to put the final build artifacts and not all the intermediate bits."}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/424806786", "html_url": "https://github.com/rust-lang/cargo/issues/6100#issuecomment-424806786", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/6100", "id": 424806786, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDgwNjc4Ng==", "user": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-26T17:42:27Z", "updated_at": "2018-09-26T17:50:07Z", "author_association": "MEMBER", "body": "I think it is important that we have both of these features:\r\n\r\n* ability to override \"scratch space\" dir for intermediate build artifacts \r\n* ability to override the place where the final build results go\r\n\r\nUI-wise, using flags for these seems better: the \"build system\" code, like ci-scripts, tends to be poked by many people, so it's important to keep it easy to understand without prior knowledge, and flags are better than env vars in this respect. \r\n\r\nI do agree that for most of the users, interacting with Cargo's CLI, these flags are irrelevant. However, this could be said about some other flags as well, like `--manifest-path`, `--message-format`, `--build-plan`, `--frozen`, `--locked`. Perhaps we should hide such \"useful in very specific circumstances\" flags from `cargo cmd --help` by default?"}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/424830873", "html_url": "https://github.com/rust-lang/cargo/issues/6100#issuecomment-424830873", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/6100", "id": 424830873, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDgzMDg3Mw==", "user": {"login": "withoutboats", "id": 9063376, "node_id": "MDQ6VXNlcjkwNjMzNzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/9063376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/withoutboats", "html_url": "https://github.com/withoutboats", "followers_url": "https://api.github.com/users/withoutboats/followers", "following_url": "https://api.github.com/users/withoutboats/following{/other_user}", "gists_url": "https://api.github.com/users/withoutboats/gists{/gist_id}", "starred_url": "https://api.github.com/users/withoutboats/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/withoutboats/subscriptions", "organizations_url": "https://api.github.com/users/withoutboats/orgs", "repos_url": "https://api.github.com/users/withoutboats/repos", "events_url": "https://api.github.com/users/withoutboats/events{/privacy}", "received_events_url": "https://api.github.com/users/withoutboats/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-26T18:56:28Z", "updated_at": "2018-09-26T18:57:47Z", "author_association": "CONTRIBUTOR", "body": "> I do agree that for most of the users, interacting with Cargo's CLI, these flags are irrelevant. However, this could be said about some other flags as well, like --manifest-path, --message-format, --build-plan, --frozen, --locked. Perhaps we should hide such \"useful in very specific circumstances\" flags from cargo cmd --help by default?\r\n\r\nI am unhappy with the UX of having all of these flags also. For a long time we've been creeping in the direction of having flags to customize every user visible aspect of the behavior, because this has been how CLI tools traditionally handle users wanting to customize their behavior. However, I think this has a bad UX overall, because it makes the tool overwhelming and ultimately makes all of the flags undiscoverable. I think hiding these tools from `--help` unless you pass another flag  is a half measure, which improves the situation but is probably not the best solution.\r\n\r\nI think a preferable approach to what we've done would be to provide some lower level command which takes as many flags as you want and can be used to build up the user-oriented commands like `cargo build`, `cargo run`, and `cargo test`, but with all of the flags to customize the precise nature of its operations. The higher level commands could be defined in terms of that lower level command, and people writing very bespoke integrations can also build their own build command out of it.\r\n\r\nSo I noticed a few days ago that when I ran `cargo build --help` it went beyond the length of my terminal. This surprised and concerned me, so I took statistics of how `cargo build --help`'s output has grown over time:\r\n\r\n![image](https://user-images.githubusercontent.com/9063376/46101457-43378000-c1cc-11e8-9951-50046a604630.png)\r\n\r\nIt was in the process of investigating how the flags to cargo build had proliferated that I noticed these two flags. I think there's a larger problem here, but these two flags in particular have such similar behavior that keeping them both has unique negative UX consequences aside from the general concern. From the `--help` output I could not understand how they were different, and I don't think their names indicate that the most material difference between them is that one excludes the intermediate artifacts. Its the kind of customization creep that makes me groan and turn to stack overflow instead whenever I try to read the man pages of any of the standard UNIX utilities: their man pages are an information overload that make it too difficult to learn things.\r\n\r\nAn obvious way to help resolve their close similarity is to clarify the differences in the `--help` output. But as we've already touched on, these are not useful for most users, and so in the common case these two commands are both cruft I am trying to sort through to figure out the flag I actually want - increasing the amount of time we dwell on them makes the situation worse. So I don't think that would be a solution either."}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/425223101", "html_url": "https://github.com/rust-lang/cargo/issues/6100#issuecomment-425223101", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/6100", "id": 425223101, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNTIyMzEwMQ==", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars1.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-27T19:58:31Z", "updated_at": "2018-09-27T19:58:31Z", "author_association": "MEMBER", "body": "I'm personally fine adding these flags basically wherever makes sense, but to echo @matklad I don't think we'll want to remove the functionality. In that sense I would want to make sure that these sorts of configurations (which you're 100% right @withoutboats, will continue to get added to seemingly no end) have some home somewhere. They're definitely not important to surface in high-profile locations, just need to be located somewhere!"}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/425225988", "html_url": "https://github.com/rust-lang/cargo/issues/6100#issuecomment-425225988", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/6100", "id": 425225988, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNTIyNTk4OA==", "user": {"login": "withoutboats", "id": 9063376, "node_id": "MDQ6VXNlcjkwNjMzNzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/9063376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/withoutboats", "html_url": "https://github.com/withoutboats", "followers_url": "https://api.github.com/users/withoutboats/followers", "following_url": "https://api.github.com/users/withoutboats/following{/other_user}", "gists_url": "https://api.github.com/users/withoutboats/gists{/gist_id}", "starred_url": "https://api.github.com/users/withoutboats/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/withoutboats/subscriptions", "organizations_url": "https://api.github.com/users/withoutboats/orgs", "repos_url": "https://api.github.com/users/withoutboats/repos", "events_url": "https://api.github.com/users/withoutboats/events{/privacy}", "received_events_url": "https://api.github.com/users/withoutboats/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-27T20:08:25Z", "updated_at": "2018-09-27T20:08:25Z", "author_association": "CONTRIBUTOR", "body": "We discussed this & also the overarching issue a bit in the cargo meeting yesterday. The sort of overarching viewpoint was that it would be ideal to expose these kinds of knobs through a set of lower level primitive commands on top of which sit the more user oriented commands (git has this distinction for example, calling them \"porcelain\" and \"plumbing\").\r\n\r\nHowever, the problem with doing that is that it requires major refactors which seem difficult or infeasible. On the other hand, by adding all of these knobs incrementally we end up with the same functionality, but with worse UX (from having the functionality exposed through a bunch of flags on the main commands), and worse maintainability (because those flags are being threaded through the entire codebase). But back to the problem of pulling off a refactor, and so we ended at a standstill."}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/425343076", "html_url": "https://github.com/rust-lang/cargo/issues/6100#issuecomment-425343076", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/6100", "id": 425343076, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNTM0MzA3Ng==", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars1.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-28T07:07:56Z", "updated_at": "2018-09-28T07:07:56Z", "author_association": "MEMBER", "body": "Was there a good idea of what the porcelain/plumbing mode would actually look like in Cargo? In abstract it makes sense but if there's a concrete idea where to go it may not be so bad to draw up an issue and start soliciting help for making progress"}]