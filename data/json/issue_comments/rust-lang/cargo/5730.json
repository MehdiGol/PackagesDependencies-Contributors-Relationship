[{"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/405249565", "html_url": "https://github.com/rust-lang/cargo/issues/5730#issuecomment-405249565", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/5730", "id": 405249565, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTI0OTU2NQ==", "user": {"login": "phil-opp", "id": 1131315, "node_id": "MDQ6VXNlcjExMzEzMTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1131315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phil-opp", "html_url": "https://github.com/phil-opp", "followers_url": "https://api.github.com/users/phil-opp/followers", "following_url": "https://api.github.com/users/phil-opp/following{/other_user}", "gists_url": "https://api.github.com/users/phil-opp/gists{/gist_id}", "starred_url": "https://api.github.com/users/phil-opp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phil-opp/subscriptions", "organizations_url": "https://api.github.com/users/phil-opp/orgs", "repos_url": "https://api.github.com/users/phil-opp/repos", "events_url": "https://api.github.com/users/phil-opp/events{/privacy}", "received_events_url": "https://api.github.com/users/phil-opp/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-16T13:36:15Z", "updated_at": "2018-07-16T13:36:15Z", "author_association": "CONTRIBUTOR", "body": "Oh wow, it seems like this issue was already reported multiple times:\r\n\r\nrust-lang/cargo#4866 rust-lang/cargo#4664 rust-lang/cargo#2589 rust-lang/cargo#4361\r\n\r\nThe oldest report is from April 2016, over two years ago. Given that embedded is a target domain of Rust's 2018 roadmap and build scripts are a common stable feature of cargo, I think we should tackle this issue. Especially because it leads to very confusing errors and there are no good workarounds."}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/405296581", "html_url": "https://github.com/rust-lang/cargo/issues/5730#issuecomment-405296581", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/5730", "id": 405296581, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTI5NjU4MQ==", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars1.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-16T15:58:50Z", "updated_at": "2018-07-16T15:58:50Z", "author_association": "MEMBER", "body": "Indeed the intention is to solve this issue! \r\n\r\n@Eh2406 I'm curious, would you be interested in tackling this issue? I think it has implications on resolution but it's not exclusively concerned with crate graph resolution. There's a lot of interaction with the backend as well where Cargo actually invokes rustc"}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/405315427", "html_url": "https://github.com/rust-lang/cargo/issues/5730#issuecomment-405315427", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/5730", "id": 405315427, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTMxNTQyNw==", "user": {"login": "Eh2406", "id": 3709504, "node_id": "MDQ6VXNlcjM3MDk1MDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3709504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eh2406", "html_url": "https://github.com/Eh2406", "followers_url": "https://api.github.com/users/Eh2406/followers", "following_url": "https://api.github.com/users/Eh2406/following{/other_user}", "gists_url": "https://api.github.com/users/Eh2406/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eh2406/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eh2406/subscriptions", "organizations_url": "https://api.github.com/users/Eh2406/orgs", "repos_url": "https://api.github.com/users/Eh2406/repos", "events_url": "https://api.github.com/users/Eh2406/events{/privacy}", "received_events_url": "https://api.github.com/users/Eh2406/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-16T17:00:16Z", "updated_at": "2018-07-16T17:00:28Z", "author_association": "CONTRIBUTOR", "body": "I am happy to help any way I can. However, this has been open for a long time *because* it is very hard, and tangled with many of the other things that need to be rethought. \r\n\r\nThe goal is that build script and the real build have the same dependency with different features.\r\n- How does this interact with other profiles, why is this flexibility limited to build/real what about test and release? This is made more complicated as the idea of a \"profile\" is already stretched to the breaking point and @ehuss has been thinking of redesigning parts of it (I think).\r\n- Is this eavan correct, for normal additive features? If my build script generates extra code if the feature `serde` is on, and my main uses that code with `cfg(feature(\"serde\"))` then they head better aggry about if `serde` is on.\r\n- How does this interact with private dependencies? When do we combine the features of two otherwize private dependencies? How are we going to implement private dependencies? (it triggers a lot of the same questions.)\r\n- Cargo.lock currently uses name-ver as a unique id, how do we add support for some new id. How does this not brake older cargo. If it does brake older cargo then what else should we do at the same time? Queue the stalled rfc on versioning of Cargo.toml/Cargo.lock\r\n\r\n..."}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/405358235", "html_url": "https://github.com/rust-lang/cargo/issues/5730#issuecomment-405358235", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/5730", "id": 405358235, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTM1ODIzNQ==", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars1.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-16T19:41:58Z", "updated_at": "2018-07-16T19:41:58Z", "author_association": "MEMBER", "body": "Oh in general I see this as having a pretty simple (sort of) model of what should happen. Right now in cargo's backend we have a graph of \"units\" where each unit is basically a tuple of (package, target, profile, info). Here we have a precise dependency graph of what to do and each \"unit\" corresponds to one process, be it rustc, rustdoc, a build script, etc. Occasionally a unit needs to ask \"what features are active for me?\" but this question doesn't have an answer right now. We can at best coarsely answer \"this package has all these features enabled\", but that's not correct when you have cross-compiling in effect.\r\n\r\nThe \"solution\" here is to basically propagate features not through the crate graph resolution, but rather through the unit dependencies. When one unit depends on another it depends on it with a set of features, and those features get unioned over time into a *unit*, not a *package*. We can probably make this distinction a bit more coarse and group it by (unit, kind) where kind is in the \"info\" above and basically says \"compile for the target\" or \"compile for the host\".\r\n\r\nIf that all makes sense then the profile bits I don't think interact with features at all. Each unit already has a profile selected as well, so if it did the information is in theory there! I also don't think that public/private dependencies would affect much here too, I think it's mostly just feature propagation? (as we do today, only a little less aggressively). And finally for Cargo.lock features don't come into play either, that's just a resolution of crate graph versions and we pessimistically assume that all features are activated to generate it, so there's no need to record features in Cargo.lock\r\n\r\nAll that leaves build scripts (I think?) and that's indeed true! In theory this doesn't matter as build scripts are compiled with environment variables indicating enabled features, but they're also today compiled with `--cfg` directives which can indeed cause problems I think. I haven't thought this one through too much :)"}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/405394456", "html_url": "https://github.com/rust-lang/cargo/issues/5730#issuecomment-405394456", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/5730", "id": 405394456, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTM5NDQ1Ng==", "user": {"login": "Eh2406", "id": 3709504, "node_id": "MDQ6VXNlcjM3MDk1MDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3709504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eh2406", "html_url": "https://github.com/Eh2406", "followers_url": "https://api.github.com/users/Eh2406/followers", "following_url": "https://api.github.com/users/Eh2406/following{/other_user}", "gists_url": "https://api.github.com/users/Eh2406/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eh2406/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eh2406/subscriptions", "organizations_url": "https://api.github.com/users/Eh2406/orgs", "repos_url": "https://api.github.com/users/Eh2406/repos", "events_url": "https://api.github.com/users/Eh2406/events{/privacy}", "received_events_url": "https://api.github.com/users/Eh2406/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-16T21:57:43Z", "updated_at": "2018-07-16T21:57:43Z", "author_association": "CONTRIBUTOR", "body": "That sounds a lot more doable than I was expecting. Conveniently, Cargo.lock does not record features so that is off the list. \r\n\r\nLet me try and explain what I was thinking with relation to public/private dependencies.\r\nlet's say we are compiling `a` witch depends on `b` and `c` each of which depends on `d`.\r\nCurrently no matter the nature of that \"depends\"; `b` and `c` will both see the same version of `d` and, the `d` that `b` and `c` see have the same features, and `d` will only bilt once per target.\r\nAfter a minimal fix to this, if `b` is only a build dependency, then we wave the second invariant, and consequently the third as well. #5237 asked us to wave the first invariant for similar reasons.\r\nAfter impl private dependencies then, if `b` only has a private dependency on `d` then we will wave some or all the invariants, design work tbd. So there is a similar problem shape. Although as I type, I am not seeing a deeper connection.\r\n\r\nOn another concern, do all bild unit dependencies on `d` see the same features, or do each get only the features it asked for?"}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/405403081", "html_url": "https://github.com/rust-lang/cargo/issues/5730#issuecomment-405403081", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/5730", "id": 405403081, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTQwMzA4MQ==", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars1.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-16T22:39:18Z", "updated_at": "2018-07-16T22:39:18Z", "author_association": "MEMBER", "body": "Hm yeah I'm not sure if there's a connection there either, but it's something I suspect that fleshing out the implementation would show pretty readily!\r\n\r\nCurrently whether or not you're a build or normal dependency all feature calculations are done the same way, you're always compiled with the same set of features in both contexts (which is the bug here)"}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/405414890", "html_url": "https://github.com/rust-lang/cargo/issues/5730#issuecomment-405414890", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/5730", "id": 405414890, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTQxNDg5MA==", "user": {"login": "Eh2406", "id": 3709504, "node_id": "MDQ6VXNlcjM3MDk1MDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3709504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eh2406", "html_url": "https://github.com/Eh2406", "followers_url": "https://api.github.com/users/Eh2406/followers", "following_url": "https://api.github.com/users/Eh2406/following{/other_user}", "gists_url": "https://api.github.com/users/Eh2406/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eh2406/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eh2406/subscriptions", "organizations_url": "https://api.github.com/users/Eh2406/orgs", "repos_url": "https://api.github.com/users/Eh2406/repos", "events_url": "https://api.github.com/users/Eh2406/events{/privacy}", "received_events_url": "https://api.github.com/users/Eh2406/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-16T23:48:35Z", "updated_at": "2018-07-16T23:48:35Z", "author_association": "CONTRIBUTOR", "body": "> Currently whether or not you're a build or normal dependency all feature calculations are done the same way, you're always compiled with the same set of features in both contexts (which is the bug here)\r\n\r\nAgreed, so after this bug is fixed if I depend on `a` and `d` while `a` has a build dependency on `d` with feature `foo` then:\r\n- my `main.rs` sees `d` as not having `foo` \r\n- but `a`'s `build.rs` sees `d` as having `foo`.\r\n(that is the definition of fixing this bug.)\r\n\r\nMy current question is,  I depend on `a`, `b` and `d` while `a` has a build dependency on `d` with feature `foo` and `b` has a build dependency on `d` with feature `bar` then:\r\n- my `main.rs` sees `d` as not having neither `foo` nor bar.\r\n- but `a`'s `build.rs` sees `d` as having `foo`  but does it see `bar`?\r\n- but `d`'s `build.rs` sees `d` as having `bar` but does it see `foo`?\r\n"}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/405459297", "html_url": "https://github.com/rust-lang/cargo/issues/5730#issuecomment-405459297", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/5730", "id": 405459297, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTQ1OTI5Nw==", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars1.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-17T04:55:33Z", "updated_at": "2018-07-17T04:55:33Z", "author_association": "MEMBER", "body": "@Eh2406 for your first scenario, indeed! That's what I imagine for this issue as well.\r\n\r\nIn your second scenario then `a` and `b` will see `d` with both the `foo` and `bar` features because we can only compile the library once and features are defined to get unioned. I think the main thrust of this issue is what then *cross compiling* (more than one target involved) we're already compiling two artifacts so we should no longer be unioning across targets."}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/405476441", "html_url": "https://github.com/rust-lang/cargo/issues/5730#issuecomment-405476441", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/5730", "id": 405476441, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTQ3NjQ0MQ==", "user": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars0.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-17T06:41:04Z", "updated_at": "2018-07-17T06:41:04Z", "author_association": "CONTRIBUTOR", "body": "> because we can only compile the library once\r\n\r\nJust a random idea, I was thinking that maybe the `Unit` could include the features to lift this restriction.  At least for build-deps, it would be easy to do utilizing the `ProfileFor` flag."}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/405593610", "html_url": "https://github.com/rust-lang/cargo/issues/5730#issuecomment-405593610", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/5730", "id": 405593610, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTU5MzYxMA==", "user": {"login": "Eh2406", "id": 3709504, "node_id": "MDQ6VXNlcjM3MDk1MDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3709504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eh2406", "html_url": "https://github.com/Eh2406", "followers_url": "https://api.github.com/users/Eh2406/followers", "following_url": "https://api.github.com/users/Eh2406/following{/other_user}", "gists_url": "https://api.github.com/users/Eh2406/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eh2406/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eh2406/subscriptions", "organizations_url": "https://api.github.com/users/Eh2406/orgs", "repos_url": "https://api.github.com/users/Eh2406/repos", "events_url": "https://api.github.com/users/Eh2406/events{/privacy}", "received_events_url": "https://api.github.com/users/Eh2406/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-17T14:04:41Z", "updated_at": "2018-07-17T14:04:41Z", "author_association": "CONTRIBUTOR", "body": "@alexcrichton That would make the change smaller. I am concerned how do we explain the rule for when do \"features get unioned\". For example:\r\n\r\n> we're already compiling two artifacts so we should no longer be unioning across targets\r\n\r\nimplies that this only works if cross compiling!? That my main.rs sees `d` as having `foo` and `bar` if it is being built locally, but not if cross compiling.\r\n\r\n@ehuss Lol. Two people respond, two contradictory answers. :-) I am glad to hear that the other alternative is conceivable doable."}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/405629218", "html_url": "https://github.com/rust-lang/cargo/issues/5730#issuecomment-405629218", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/5730", "id": 405629218, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTYyOTIxOA==", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars1.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-17T15:43:49Z", "updated_at": "2018-07-17T15:43:49Z", "author_association": "MEMBER", "body": "@Eh2406 another excellent question! This is where you get to a sort of obscure part of Cargo today where let's say you've got a compiler for x86_64-unknown-linux-gnu installed. It turns out these two invocations are actually pretty different:\r\n\r\n* `cargo build`\r\n* `cargo build --target x86_64-unknown-linux-gnu`\r\n\r\nIn the latter invocation Cargo thinks it's cross compiling so it'll build *more* than the first invocation. This means that if you have a big dependency which is both a target and a build dependency the first command will build it once while the second command will build it twice. \r\n\r\nThe behavior here has been in place since the early days of Cargo but has definitely been brought up as suspect over time. The benefit is that `cargo build` can be faster, but the downside is that you'd naively think the two commands above are equivalent but they're not.\r\n\r\nSo to answer your question, Cargo already gives an \"uncomfortable answer\" to when you're not cross compiling you get different results than if you're cross compiling. In that sense I think it's ok to not worry about it with respect to this issue. If we ever fix this issue it'll naturally fall out that features will be separated as well.\r\n\r\n@ehuss due to the unioning nature of features we have to iteratively walk the dependency graph to discover features enabled, so I think this probably won't be embedded in a `Unit` directly but rather be stored as a `Unit => Vec<String>` map or something like that which is built after we calculate all `Unit`s and their dependencies."}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/405684587", "html_url": "https://github.com/rust-lang/cargo/issues/5730#issuecomment-405684587", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/5730", "id": 405684587, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTY4NDU4Nw==", "user": {"login": "Eh2406", "id": 3709504, "node_id": "MDQ6VXNlcjM3MDk1MDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3709504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eh2406", "html_url": "https://github.com/Eh2406", "followers_url": "https://api.github.com/users/Eh2406/followers", "following_url": "https://api.github.com/users/Eh2406/following{/other_user}", "gists_url": "https://api.github.com/users/Eh2406/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eh2406/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eh2406/subscriptions", "organizations_url": "https://api.github.com/users/Eh2406/orgs", "repos_url": "https://api.github.com/users/Eh2406/repos", "events_url": "https://api.github.com/users/Eh2406/events{/privacy}", "received_events_url": "https://api.github.com/users/Eh2406/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-17T18:37:03Z", "updated_at": "2018-07-17T19:34:40Z", "author_association": "CONTRIBUTOR", "body": "So currently `cargo build` and `cargo build --target x86_64-unknown-linux-gnu` are observable different, one compiles deps once and the other twice. \r\nAfter this issue is fixed they will additionality have different output code; a build.rs will see all features with `cargo build` and only dev features with `cargo build --target x86_64-unknown-linux-gnu`.\r\n\r\n**edit:** that is backwards. build.rs will always see all features. main.rs will only see real deps features in `cargo build --target x86_64-unknown-linux-gnu` but will see all features in `cargo build`\r\n\r\nThat is a significantly bigger change, but we can chalk that up to just another part of that long standing oddity."}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/405728140", "html_url": "https://github.com/rust-lang/cargo/issues/5730#issuecomment-405728140", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/5730", "id": 405728140, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTcyODE0MA==", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars1.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-17T21:07:02Z", "updated_at": "2018-07-17T21:07:02Z", "author_association": "MEMBER", "body": "@Eh2406 I think you're right yeah! Unfortunately no matter how this is sliced it's a sort of big change :("}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/407149662", "html_url": "https://github.com/rust-lang/cargo/issues/5730#issuecomment-407149662", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/5730", "id": 407149662, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzE0OTY2Mg==", "user": {"login": "Eh2406", "id": 3709504, "node_id": "MDQ6VXNlcjM3MDk1MDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3709504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eh2406", "html_url": "https://github.com/Eh2406", "followers_url": "https://api.github.com/users/Eh2406/followers", "following_url": "https://api.github.com/users/Eh2406/following{/other_user}", "gists_url": "https://api.github.com/users/Eh2406/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eh2406/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eh2406/subscriptions", "organizations_url": "https://api.github.com/users/Eh2406/orgs", "repos_url": "https://api.github.com/users/Eh2406/repos", "events_url": "https://api.github.com/users/Eh2406/events{/privacy}", "received_events_url": "https://api.github.com/users/Eh2406/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-23T18:07:40Z", "updated_at": "2018-07-23T18:07:40Z", "author_association": "CONTRIBUTOR", "body": "I'm convinced despite the braking of things this needs to happen. Where should I get started?\r\n\r\nRelevant: #5656 if we make them more different we should document when to add it to CI."}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/407210768", "html_url": "https://github.com/rust-lang/cargo/issues/5730#issuecomment-407210768", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/5730", "id": 407210768, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzIxMDc2OA==", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars1.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-23T21:43:03Z", "updated_at": "2018-07-23T21:43:03Z", "author_association": "MEMBER", "body": "@Eh2406 I think the basic steps here are to delete the `Resolve::features` method and then \"get everything compiling again\". It basically makes no sense to query what features are activated for a package any more unless you *also* have the context of \"for what build target?\" in mind"}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/407267674", "html_url": "https://github.com/rust-lang/cargo/issues/5730#issuecomment-407267674", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/5730", "id": 407267674, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzI2NzY3NA==", "user": {"login": "Eh2406", "id": 3709504, "node_id": "MDQ6VXNlcjM3MDk1MDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3709504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eh2406", "html_url": "https://github.com/Eh2406", "followers_url": "https://api.github.com/users/Eh2406/followers", "following_url": "https://api.github.com/users/Eh2406/following{/other_user}", "gists_url": "https://api.github.com/users/Eh2406/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eh2406/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eh2406/subscriptions", "organizations_url": "https://api.github.com/users/Eh2406/orgs", "repos_url": "https://api.github.com/users/Eh2406/repos", "events_url": "https://api.github.com/users/Eh2406/events{/privacy}", "received_events_url": "https://api.github.com/users/Eh2406/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-24T03:19:55Z", "updated_at": "2018-07-24T03:19:55Z", "author_association": "CONTRIBUTOR", "body": "Ok so I have a branch with a new `build_target: Option<()>` peram on [`features`](https://github.com/rust-lang/cargo/blob/fc577df650c8191fb4ee80dcd43dac5644004d92/src/cargo/core/resolver/resolve.rs#L190-L198), and the 14 places where it is called are passing `None`. What Is next? What type goes in that arg, and what do we do with it? Next time I am awake I can start figuring it out. Presumably some `Enom (dev | target) or None for all`, unless we have one already, and then do a graph traversal for features needed by that type for that id. "}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/407419602", "html_url": "https://github.com/rust-lang/cargo/issues/5730#issuecomment-407419602", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/5730", "id": 407419602, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzQxOTYwMg==", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars1.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-24T14:08:09Z", "updated_at": "2018-07-24T14:08:09Z", "author_association": "MEMBER", "body": "@Eh2406 hm from this point I'm not really sure how this would be best done! I haven't thought through this too much myself but I'm fine reviewing any implementation! I suspect the first thing that sticks on the wall will be good enough :)"}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/407458768", "html_url": "https://github.com/rust-lang/cargo/issues/5730#issuecomment-407458768", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/5730", "id": 407458768, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzQ1ODc2OA==", "user": {"login": "Eh2406", "id": 3709504, "node_id": "MDQ6VXNlcjM3MDk1MDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3709504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eh2406", "html_url": "https://github.com/Eh2406", "followers_url": "https://api.github.com/users/Eh2406/followers", "following_url": "https://api.github.com/users/Eh2406/following{/other_user}", "gists_url": "https://api.github.com/users/Eh2406/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eh2406/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eh2406/subscriptions", "organizations_url": "https://api.github.com/users/Eh2406/orgs", "repos_url": "https://api.github.com/users/Eh2406/repos", "events_url": "https://api.github.com/users/Eh2406/events{/privacy}", "received_events_url": "https://api.github.com/users/Eh2406/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-24T15:58:05Z", "updated_at": "2018-07-24T15:58:05Z", "author_association": "CONTRIBUTOR", "body": "@ehuss I know you have been working on different build args for different target like things. (sorry if I have the terminology wrong.) Do you have advice for me? Specificky is there existing systems/types I should be using/aware of for consistency with your work?"}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/407490749", "html_url": "https://github.com/rust-lang/cargo/issues/5730#issuecomment-407490749", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/5730", "id": 407490749, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzQ5MDc0OQ==", "user": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars0.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-24T17:39:17Z", "updated_at": "2018-07-24T17:39:17Z", "author_association": "CONTRIBUTOR", "body": "IIUC, the intent is to only fix this for the cross-compile case?  If that's correct, I don't think it would interact with the profile changes at all.  As Alex mentioned, it would probably need to build a map so that given a Unit it can return the correct set of features to use (looking at `kind` to determine if it is a build-dep and `pkg` to figure out which features).  Then in `build_base_args()` and `rustdoc()` it should use that map to determine the correct `--cfg` flags.  \r\n\r\nAt least that's my best guess of how I understand it.  I'm not terribly familiar with how features or Resolve work, so I don't really know how to compute the feature set.\r\n"}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/407496076", "html_url": "https://github.com/rust-lang/cargo/issues/5730#issuecomment-407496076", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/5730", "id": 407496076, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzQ5NjA3Ng==", "user": {"login": "Eh2406", "id": 3709504, "node_id": "MDQ6VXNlcjM3MDk1MDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3709504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eh2406", "html_url": "https://github.com/Eh2406", "followers_url": "https://api.github.com/users/Eh2406/followers", "following_url": "https://api.github.com/users/Eh2406/following{/other_user}", "gists_url": "https://api.github.com/users/Eh2406/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eh2406/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eh2406/subscriptions", "organizations_url": "https://api.github.com/users/Eh2406/orgs", "repos_url": "https://api.github.com/users/Eh2406/repos", "events_url": "https://api.github.com/users/Eh2406/events{/privacy}", "received_events_url": "https://api.github.com/users/Eh2406/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-24T17:55:57Z", "updated_at": "2018-07-24T17:55:57Z", "author_association": "CONTRIBUTOR", "body": "@ehuss That was very helpful! I am not very familiar with how anything but Resolve work, so that gives me somewhere to start. I can definitely do the inner Resolve side, I may bug you again to see if I got the outer part correct."}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/407498017", "html_url": "https://github.com/rust-lang/cargo/issues/5730#issuecomment-407498017", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/5730", "id": 407498017, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzQ5ODAxNw==", "user": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars0.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-24T18:01:50Z", "updated_at": "2018-07-24T18:01:50Z", "author_association": "CONTRIBUTOR", "body": "Hm, but thinking about it more, `kind` by itself isn't enough to distinguish between a build-dep and other deps.  That's the part that I was thinking about before, it doesn't seem like `Unit` has enough information to differentiate them.  It could say `build_config.requested_target.is_some() && unit.kind==Host` to say it is a cross-compile build-dep, but that would be wrong for proc-macro and plugins.  Maybe that doesn't matter, or has another way to mitigate or differentiate.  \r\n\r\nI'm also a little uneasy about only addressing the cross-compile build-dep case.  Although that probably covers that vast majority of use cases, it seems like it could be confusing.  There have been quite a few feature requests for more granular feature and dependency control.  But fixing this one case would be a big win, so it's probably a good first step!"}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/407505873", "html_url": "https://github.com/rust-lang/cargo/issues/5730#issuecomment-407505873", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/5730", "id": 407505873, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzUwNTg3Mw==", "user": {"login": "Eh2406", "id": 3709504, "node_id": "MDQ6VXNlcjM3MDk1MDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3709504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eh2406", "html_url": "https://github.com/Eh2406", "followers_url": "https://api.github.com/users/Eh2406/followers", "following_url": "https://api.github.com/users/Eh2406/following{/other_user}", "gists_url": "https://api.github.com/users/Eh2406/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eh2406/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eh2406/subscriptions", "organizations_url": "https://api.github.com/users/Eh2406/orgs", "repos_url": "https://api.github.com/users/Eh2406/repos", "events_url": "https://api.github.com/users/Eh2406/events{/privacy}", "received_events_url": "https://api.github.com/users/Eh2406/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-24T18:26:26Z", "updated_at": "2018-07-24T19:01:07Z", "author_association": "CONTRIBUTOR", "body": "So I think for the inner Resolve side I need to do a BFS over the dependency tree to build a sub tree for things needed each `Kind`. In a quick scan I did not fined where we determined what `Kind` a dep is; I'd prefer to reuse the existing code if possible.\r\n\r\nEdit: looks like the code you pointed me to is already doing a BFS over the dependency tree, exactly to figure out how all the pieces fit together. So recalculating features should \"just\" be worked in there, and removed from Resolve as @alexcrichton originally suggested."}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/426787914", "html_url": "https://github.com/rust-lang/cargo/issues/5730#issuecomment-426787914", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/5730", "id": 426787914, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjc4NzkxNA==", "user": {"login": "Eh2406", "id": 3709504, "node_id": "MDQ6VXNlcjM3MDk1MDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3709504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eh2406", "html_url": "https://github.com/Eh2406", "followers_url": "https://api.github.com/users/Eh2406/followers", "following_url": "https://api.github.com/users/Eh2406/following{/other_user}", "gists_url": "https://api.github.com/users/Eh2406/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eh2406/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eh2406/subscriptions", "organizations_url": "https://api.github.com/users/Eh2406/orgs", "repos_url": "https://api.github.com/users/Eh2406/repos", "events_url": "https://api.github.com/users/Eh2406/events{/privacy}", "received_events_url": "https://api.github.com/users/Eh2406/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-03T20:23:09Z", "updated_at": "2018-10-03T20:23:09Z", "author_association": "CONTRIBUTOR", "body": "@ehuss you commented you had free cycles, want to give this a try?"}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/427602545", "html_url": "https://github.com/rust-lang/cargo/issues/5730#issuecomment-427602545", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/5730", "id": 427602545, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzYwMjU0NQ==", "user": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars0.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-06T20:05:39Z", "updated_at": "2018-10-06T20:05:39Z", "author_association": "CONTRIBUTOR", "body": "I'll take a look.  One question I had, when a feature is enabled with slash syntax, should it enable it for both the regular dependency and the build dependency?  For example, `--features somedep/feat1` or inside a `[features]` block?  Or should it only affect certain types of dependencies?  Or does there need to be more control for selecting the type of dependency?  "}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/427780539", "html_url": "https://github.com/rust-lang/cargo/issues/5730#issuecomment-427780539", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/5730", "id": 427780539, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzc4MDUzOQ==", "user": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars1.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-08T10:03:52Z", "updated_at": "2018-10-08T10:03:52Z", "author_association": "CONTRIBUTOR", "body": "I just checked whether I had any crates in my cache that optionally enabled features for a build dependency, looks like out of the 145 versions of crates with `build-dependencies` (of 1298 versions of crates in my cache) none of them do.\r\n\r\nThis script needs [`ripgrep`](https://github.com/BurntSushi/ripgrep), [`yq`](https://github.com/kislyuk/yq) (for `tq`) and [`jq`](https://stedolan.github.io/jq/) installed:\r\n\r\n```\r\n\u2192 rg -0 --no-ignore -l -g 'Cargo.toml' 'build-dependencies' | xargs -0 tq -r '\r\n    select(has(\"features\") and has(\"build-dependencies\"))\r\n  | ([.features[][] | select(contains(\"/\")) | (. / \"/\")[0]] | unique) as $optionaled\r\n  | (.\"build-dependencies\" | keys) as $deps\r\n  | select(any($deps | .[]; . as $dep | any($optionaled | .[]; . == $dep)))\r\n  | .package.name\r\n'\r\n```\r\n\r\nI think eventually we would need to have more control over selecting the type of dependency. Maybe not so much for build dependencies, but for test dependencies I can definitely see situations where testing an optional feature requires activating extra optional features of a dependency just for the tests.\r\n\r\nIt seems like there should be an RFC detailing the full intended design of features and optional dependencies, there's likely to be interaction between fixing this, #5364, #5565, #1596, #1796, #2589 (dup of this), and #3494. Having an overall roadmap of how these would all work together could help answer questions like that."}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/427802319", "html_url": "https://github.com/rust-lang/cargo/issues/5730#issuecomment-427802319", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/5730", "id": 427802319, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzgwMjMxOQ==", "user": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars1.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-08T11:40:04Z", "updated_at": "2018-10-08T11:40:04Z", "author_association": "CONTRIBUTOR", "body": "Reading through #5565 some more, I wonder if namespaced features could be extended to cover different dependency contexts as well."}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/427853895", "html_url": "https://github.com/rust-lang/cargo/issues/5730#issuecomment-427853895", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/5730", "id": 427853895, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzg1Mzg5NQ==", "user": {"login": "Eh2406", "id": 3709504, "node_id": "MDQ6VXNlcjM3MDk1MDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3709504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eh2406", "html_url": "https://github.com/Eh2406", "followers_url": "https://api.github.com/users/Eh2406/followers", "following_url": "https://api.github.com/users/Eh2406/following{/other_user}", "gists_url": "https://api.github.com/users/Eh2406/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eh2406/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eh2406/subscriptions", "organizations_url": "https://api.github.com/users/Eh2406/orgs", "repos_url": "https://api.github.com/users/Eh2406/repos", "events_url": "https://api.github.com/users/Eh2406/events{/privacy}", "received_events_url": "https://api.github.com/users/Eh2406/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-08T14:21:28Z", "updated_at": "2018-10-08T14:21:28Z", "author_association": "CONTRIBUTOR", "body": "+1 for an rfc. +1 for more control eventually. but also a +1 for finding some way to make progress for now and give the no-std people a workaround.\r\nIf I understand the current behavior (a big if), then everything always activates for everything. If the common syntax can be made to distinguish between build/target then we may get no-std working, even if there still exist syntaxes that do activate for both.\r\nFor now would it be conservative to say `--features somedep/feat1` activates both?"}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/427879900", "html_url": "https://github.com/rust-lang/cargo/issues/5730#issuecomment-427879900", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/5730", "id": 427879900, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzg3OTkwMA==", "user": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars1.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-08T15:32:45Z", "updated_at": "2018-10-08T15:32:45Z", "author_association": "CONTRIBUTOR", "body": "I think having `--features somedep/feat1` and the same in `Cargo.toml` activate both is probably the only backwards compatible way to do it. From what I've seen of this issue it would fix the common case, i.e. having some crate which has a common dependency with one of its build crates and needs that common dependency to be built with different features for \"normal\" vs \"build\" builds.\r\n\r\nIt would also fix the example in the OP, as despite that being the uncommon case of having a direct dependency used as both a normal and build dependency it doesn't activate any optional features of it based on its own features."}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/427893012", "html_url": "https://github.com/rust-lang/cargo/issues/5730#issuecomment-427893012", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/5730", "id": 427893012, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzg5MzAxMg==", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars1.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-08T16:12:09Z", "updated_at": "2018-10-08T16:12:09Z", "author_association": "MEMBER", "body": "@ehuss FWIW I always figured that the way features would be activated would be by dependency edge. For example when building some artifact there were a number of dependency edges that caused that artifact to be needed to be built, and those edges are what determines features (rather then edges elsewhere \"randomly\" in the graph).\r\n\r\nIn that sense I figured the slash syntax would basically enable whatever kind of dependency the dependency is listed as. (and if the dependency is listed twice in two sections then \"good luck\")\r\n\r\nI'm not opposed to an RFC on this topic but I don't think there's really a whole lot of debate to be had about this. I suspect there's basically \"one correct design\" and while it probably takes some discussion to reach that point it's not necessarily RFC-scale discussion."}, {"url": "https://api.github.com/repos/rust-lang/cargo/issues/comments/428003393", "html_url": "https://github.com/rust-lang/cargo/issues/5730#issuecomment-428003393", "issue_url": "https://api.github.com/repos/rust-lang/cargo/issues/5730", "id": 428003393, "node_id": "MDEyOklzc3VlQ29tbWVudDQyODAwMzM5Mw==", "user": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars0.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-08T22:47:40Z", "updated_at": "2018-10-08T22:47:40Z", "author_association": "CONTRIBUTOR", "body": "I don't see how this can be introduced in a backwards-compatible fashion (without some kind of flag).  If you have something like the following:\r\n\r\n```toml\r\n[package]\r\nname = \"foo\"\r\nversion = \"0.1.0\"\r\n\r\n[dependencies]\r\nserde = {version = \"1.0\", features=[\"rc\"]}\r\n\r\n[build-dependencies]\r\nserde = \"1.0\"\r\n```\r\n\r\nToday, the `serde` dependency will have the `rc` feature in both cases.  If it is changed so that build-dependencies no longer have the same features as normal dependencies, that might break some packages that expect that behavior.\r\n\r\n@alexcrichton I'm not sure I understand your comment about the dependency edges.  That would mean that features would only be decoupled in the cross-compile scenario, correct?  In normal host builds there is usually only one artifact, so build-deps and normal-deps would still be unified.\r\n\r\nThere seems to be a lot of desire to fully decouple features based on the dependency kind (normal/build/dev), and to avoid enabling features for any dependencies that are not used.  proc_macro and plugins also complicate things (particularly in the non-cross-compile scenario). It seems like only addressing the cross-compile case would miss some use cases, and might be a confusing behavior.  Am I misunderstanding things?\r\n\r\n"}]